import OpenAI from 'openai';
import dotenv from 'dotenv';
import fs from 'fs';
import axios from 'axios';
import path from 'path';
import { fileURLToPath } from 'url';
import PDFParser from 'pdf2json';
import mammoth from 'mammoth';
import { promisify } from 'util';
import { createRequire } from 'module';
import PizZip from 'pizzip';
import Docxtemplater from 'docxtemplater';
import Tesseract from 'tesseract.js';
import pdf2image from 'pdf2image';
import pkg from 'pdfjs-dist/legacy/build/pdf.js';
import sharp from 'sharp';
import { PDFDocument } from 'pdf-lib';
import { fromPath } from 'pdf2pic';
import { fileTypeFromBuffer } from 'file-type';
const { getDocument, GlobalWorkerOptions } = pkg;

const require = createRequire(import.meta.url);
const ImageModule = require('docxtemplater-image-module-free');  // Agregamos .default

const libre = require('libreoffice-convert');
dotenv.config();
const API_URL = process.env.API_URL || 'http://localhost:3005';

/*const CloudConvert = require('cloudconvert');
const cloudConvert = new CloudConvert({
    apiKey: process.env.CLOUDCONVERT_API_KEY
});*/






/* const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
}); */

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
    timeout: 60000 
});
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


/*
// Funci√≥n para extraer texto de PDFs
async function extractTextFromPDF(buffer) {
    let data = await pdfParse(buffer);
    return data.text;
}
*/

function sanitizeCVText(texto) {
    if (!texto) return '';
    
    // Primero, eliminar espacios entre letras
    let textoLimpio = texto;
    
    // Detectar y corregir el patr√≥n de espacios entre letras
    textoLimpio = textoLimpio.replace(/([A-Za-z])\s+([A-Za-z])/g, '$1$2');
    
    // Corregir emails
    textoLimpio = textoLimpio.replace(/([a-zA-Z0-9])\s+(@)/g, '$1$2');
    textoLimpio = textoLimpio.replace(/(@)\s+([a-zA-Z0-9])/g, '$1$2');
    textoLimpio = textoLimpio.replace(/([a-zA-Z0-9])\s+(\.)\s+([a-zA-Z0-9])/g, '$1$2$3');
    
    // Corregir n√∫meros de tel√©fono
    textoLimpio = textoLimpio.replace(/(\d)\s+(-)\s+(\d)/g, '$1$2$3');
    
    // Corregir palabras pegadas entre letras y n√∫meros
    textoLimpio = textoLimpio.replace(/([a-zA-Z])(\d)/g, '$1 $2');
    textoLimpio = textoLimpio.replace(/(\d)([a-zA-Z])/g, '$1 $2');
    
    // Eliminar caracteres de control y caracteres no ASCII
    textoLimpio = textoLimpio
        .replace(/[\u0000-\u0019\u007F-\u009F]/g, '')
        .replace(/[^\u0020-\u007E]/g, ' ');
    
    // Corregir espacios m√∫ltiples
    textoLimpio = textoLimpio.replace(/\s+/g, ' ').trim();
    
    // Corregir casos espec√≠ficos comunes en CVs
    textoLimpio = textoLimpio
        .replace(/Product\s*Owner/g, 'Product Owner')
        .replace(/Product\s*Manager/g, 'Product Manager')
        .replace(/Product\s*Analyst/g, 'Product Analyst')
        .replace(/Analista\s*de\s*Procesos/g, 'Analista de Procesos')
        .replace(/Ingeniero\s*Industrial/g, 'Ingeniero Industrial')
        .replace(/Scrum\s*Master/g, 'Scrum Master')
        .replace(/Business\s*Analyst/g, 'Business Analyst')
        .replace(/Senior\s*Developer/g, 'Senior Developer')
        .replace(/Full\s*Stack/g, 'Full Stack')
        .replace(/Back\s*End/g, 'Back End')
        .replace(/Front\s*End/g, 'Front End')
        .replace(/DevOps/g, 'DevOps')
        .replace(/QA/g, 'QA')
        .replace(/UI\/UX/g, 'UI/UX');
    
    return textoLimpio;
}

// Crear una versi√≥n promisificada de la funci√≥n convert
function convertToPromise(buffer, outputFormat) {
    return new Promise((resolve, reject) => {
        libre.convert(buffer, outputFormat, undefined, (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
}

// Funci√≥n para extraer texto de DOCX

async function extractTextFromDOCX(buffer) {
    let result = await mammoth.extractRawText({ buffer: buffer });
    return result.value;
}  

/*
async function extractTextFromPDF(buffer) {
    try {
        const pdfParse = require('pdf-parse');
        const testFilePath = path.join(__dirname, '../node_modules/pdf-parse/test/data/05-versions-space.pdf');
        
        // Imprimir las rutas para debug
        console.log('Current directory:', __dirname);
        console.log('Test file path:', testFilePath);
        console.log('Process cwd:', process.cwd());
        
        // Configurar pdf-parse con la ruta correcta
        process.env.PDF_TEST_FILE = testFilePath;
        
        let data = await pdfParse(buffer, {
            max: 0,
            version: 'v2.0.0'
        });
        return data.text;
    } catch (error) {
        console.error('Error al procesar PDF:', error);
        console.error('Error stack:', error.stack);
        return `Error al procesar PDF: ${error.message}`;
    }
}
*/
// Funci√≥n para generar nombre √∫nico


function generateUniqueFileName(originalName) {
    const timestamp = Date.now();
    let extension = path.extname(originalName).toLowerCase();
    
    // Si no hay extensi√≥n o la extensi√≥n no incluye el punto, usar .pdf
    if (!extension || !extension.includes('.')) {
        extension = '.pdf';
    }
    
    // Asegurarse de que la extensi√≥n sea .pdf si el nombre original contiene "pdf"
    if (originalName.toLowerCase().includes('pdf') && extension !== '.pdf') {
        extension = '.pdf';
    }
    
    return `file_${timestamp}${extension}`;
}

// Funci√≥n para detectar si la extracci√≥n de texto es deficiente
function extraccionDeficiente(texto) {
    if (!texto) {
        console.log('‚ö†Ô∏è Texto nulo o vac√≠o');
        return true;
    }

    console.log(`üìä Longitud del texto: ${texto.length} caracteres`);
    
    if (texto.length < 50) {
        console.log('‚ö†Ô∏è Texto demasiado corto');
        return true;
    }

    // Palabras clave comunes en CVs
    const palabrasClave = [
        'experiencia', 'educacion', 'habilidades', 'objetivo',
        'resumen', 'perfil', 'formacion', 'trabajo',
        'proyectos', 'certificaciones', 'idiomas', 'referencias',
        'gmail', 'linkedin', 'github', 'portfolio',
        'ingeniero', 'ingenieria', 'desarrollo', 'software',
        'analista', 'proyecto', 'gestion', 'administracion',
        'product', 'owner', 'manager', 'analyst',
        'scrum', 'agile', 'lean', 'metodologias',
        'industrial', 'procesos', 'funcional', 'tecnico',
        'email', 'telefono', 'celular', 'contacto',
        'datos', 'personales', 'profesional', 'laboral'
    ];

    // Contar ocurrencias de palabras clave
    const textoLower = texto.toLowerCase();
    const ocurrencias = palabrasClave.filter(palabra => 
        textoLower.includes(palabra)
    ).length;

    console.log(`üìä Palabras clave encontradas: ${ocurrencias}`);
    console.log('üìù Texto limpio (primeros 200 caracteres):');
    console.log(textoLower.substring(0, 200));

    // Si hay menos de 2 palabras clave, considerar deficiente
    if (ocurrencias < 2) {
        console.log('‚ö†Ô∏è Muy pocas palabras clave encontradas');
        return true;
    }

    console.log('‚úÖ Texto parece v√°lido');
    return false;
}

// Funci√≥n para extraer texto con pdfplumber
async function extractTextWithPdfPlumber(buffer) {
    try {
        console.log('üîç Intentando extracci√≥n con pdfplumber...');
        const pdf = await pdfplumber.load(buffer);
        let text = '';

        for (let i = 0; i < pdf.pages.length; i++) {
            const page = pdf.pages[i];
            const pageText = await page.extractText();
            if (pageText) {
                text += pageText + '\n';
            }
        }

        console.log('‚úÖ Extracci√≥n con pdfplumber completada');
        return text;
    } catch (error) {
        console.error('‚ùå Error en pdfplumber:', error);
        throw error;
    }
}

// Funci√≥n para extraer texto con OCR
async function extractTextWithOCR(buffer) {
    try {
        console.log('üîç Iniciando extracci√≥n con OCR...');
        
        // Crear un worker de Tesseract con la configuraci√≥n correcta para v6
        const worker = await Tesseract.createWorker('spa');
        
        // Guardar el buffer temporalmente
        const tempDir = path.join(__dirname, '../temp');
        if (!fs.existsSync(tempDir)) {
            fs.mkdirSync(tempDir);
        }
        
        const tempPdfPath = path.join(tempDir, `temp_${Date.now()}.pdf`);
        fs.writeFileSync(tempPdfPath, buffer);
        
        // Convertir PDF a im√°genes con mejor calidad
        const { convert } = require('pdf-poppler');
        const opts = {
            format: 'png',
            out_dir: tempDir,
            out_prefix: 'page',
            page: null,
            scale: 3.0,  // Aumentamos la escala para mejor calidad
            dpi: 300    // Aumentamos el DPI
        };
        
        await convert(tempPdfPath, opts);
        
        // Leer las im√°genes generadas
        const files = fs.readdirSync(tempDir)
            .filter(file => file.startsWith('page-') && file.endsWith('.png'))
            .sort();
        
        console.log(`‚úÖ PDF convertido a ${files.length} im√°genes`);
        
        let fullText = '';
        
        // Procesar cada imagen con OCR
        for (const file of files) {
            const imagePath = path.join(tempDir, file);
            const imageBuffer = fs.readFileSync(imagePath);
            
            // Realizar OCR en la imagen
            const result = await worker.recognize(imageBuffer);
            fullText += result.data.text + '\n';
            
            // Limpiar archivo temporal
            fs.unlinkSync(imagePath);
        }
        
        // Limpiar archivo PDF temporal
        fs.unlinkSync(tempPdfPath);
        
        // Terminar el worker
        await worker.terminate();
        
        // Limpiar y formatear el texto extra√≠do
        fullText = fullText
            // Normalizar espacios y saltos de l√≠nea
            .replace(/\s+/g, ' ')
            .replace(/\n+/g, '\n')
            // Corregir caracteres especiales
            .replace(/[|]/g, 'I')  // Reemplazar | por I
            .replace(/[`¬¥]/g, "'") // Normalizar ap√≥strofes
            .replace(/[‚Äì‚Äî]/g, '-') // Normalizar guiones
            // Corregir espacios entre palabras
            .replace(/([a-z])([A-Z])/g, '$1 $2')  // Agregar espacio entre palabras pegadas
            .replace(/([A-Za-z])(\d)/g, '$1 $2')  // Agregar espacio entre letras y n√∫meros
            .replace(/(\d)([A-Za-z])/g, '$1 $2')  // Agregar espacio entre n√∫meros y letras
            // Corregir puntuaci√≥n
            .replace(/\s+([.,;:!?])/g, '$1')  // Eliminar espacios antes de puntuaci√≥n
            .replace(/([.,;:!?])([A-Za-z])/g, '$1 $2')  // Agregar espacio despu√©s de puntuaci√≥n
            // Corregir casos espec√≠ficos comunes en CVs
            .replace(/Product\s*Owner/g, 'Product Owner')
            .replace(/Product\s*Manager/g, 'Product Manager')
            .replace(/Product\s*Analyst/g, 'Product Analyst')
            .replace(/Analista\s*de\s*Procesos/g, 'Analista de Procesos')
            .replace(/Ingeniero\s*Industrial/g, 'Ingeniero Industrial')
            .replace(/Scrum\s*Master/g, 'Scrum Master')
            .replace(/Business\s*Analyst/g, 'Business Analyst')
            .replace(/Senior\s*Developer/g, 'Senior Developer')
            .replace(/Full\s*Stack/g, 'Full Stack')
            .replace(/Back\s*End/g, 'Back End')
            .replace(/Front\s*End/g, 'Front End')
            .replace(/DevOps/g, 'DevOps')
            .replace(/QA/g, 'QA')
            .replace(/UI\/UX/g, 'UI/UX')
            // Eliminar caracteres no deseados
            .replace(/[^\w\s.,;:!?¬ø¬°()\-@#$%&*+=<>/\\|_~√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë√º√ú]/g, '')
            .trim();
        
        console.log('‚úÖ Extracci√≥n con OCR completada');
        console.log(`üìä Longitud del texto extra√≠do: ${fullText.length} caracteres`);
        
        if (fullText.length < 100) {
            throw new Error('El texto extra√≠do es demasiado corto, posiblemente el OCR fall√≥');
        }
        
        return fullText;
    } catch (error) {
        console.error('‚ùå Error en OCR:', error);
        throw error;
    }
}

// Funci√≥n para extraer texto de DOCX con mammoth
async function extractTextFromDocx(buffer) {
    try {
        console.log('üîç Intentando extracci√≥n directa de DOCX con mammoth...');
        const result = await mammoth.extractRawText({ buffer });
        console.log('‚úÖ Extracci√≥n con mammoth completada');
        return result.value;
    } catch (error) {
        console.error('‚ùå Error en mammoth:', error);
        throw error;
    }
}

// Configurar el worker de PDF.js
GlobalWorkerOptions.workerSrc = require.resolve('pdfjs-dist/legacy/build/pdf.worker.js');

// Funci√≥n mejorada para extraer texto de PDF
async function extractTextFromPDF(buffer) {
    try {
        console.log('üîç Iniciando extracci√≥n de texto del PDF...');
        
        // 1. Intentar con PDF.js primero
        try {
            console.log('üîÑ Intentando con PDF.js...');
            const text = await extractTextWithPDFJS(buffer);
            
            if (!extraccionDeficiente(text)) {
                console.log('‚úÖ Extracci√≥n exitosa con PDF.js');
                return text;
            }
            console.log('‚ö†Ô∏è Extracci√≥n con PDF.js result√≥ deficiente');
        } catch (pdfjsError) {
            console.error('‚ùå Error en PDF.js:', pdfjsError);
        }
        
        // 2. Si PDF.js falla, intentar con pdf2json
        try {
            console.log('üîÑ Intentando con pdf2json...');
            const pdfParser = new PDFParser();
            
            const text = await new Promise((resolve, reject) => {
                pdfParser.on("pdfParser_dataReady", pdfData => {
                    try {
                        let text = decodeURIComponent(pdfData.Pages.map(page => 
                            page.Texts.map(text => text.R.map(r => r.T).join('')).join(' ')
                        ).join('\n'));
                        
                        text = sanitizeCVText(text);
                        console.log('üìù Primeros 200 caracteres extra√≠dos con pdf2json:');
                        console.log(text.substring(0, 200));
                        
                        if (!extraccionDeficiente(text)) {
                            console.log('‚úÖ Extracci√≥n exitosa con pdf2json');
                            resolve(text);
                        } else {
                            console.log('‚ö†Ô∏è Extracci√≥n con pdf2json result√≥ deficiente');
                            reject(new Error('Extracci√≥n deficiente'));
                        }
                    } catch (error) {
                        console.error('‚ùå Error procesando el texto extra√≠do:', error);
                        reject(error);
                    }
                });
                
                pdfParser.on("pdfParser_dataError", error => {
                    console.error('‚ùå Error en pdf2json:', error);
                    reject(error);
                });
                
                pdfParser.parseBuffer(buffer);
            });

            return text;
        } catch (pdf2jsonError) {
            console.error('‚ùå Error en pdf2json:', pdf2jsonError);
        }
        
        // 3. Si ambos m√©todos anteriores fallan, intentar con OCR
        try {
            console.log('üîÑ Intentando extracci√≥n con OCR...');
            const text = await extractTextWithOCR(buffer);
            
            if (!extraccionDeficiente(text)) {
                console.log('‚úÖ Extracci√≥n exitosa con OCR');
                return text;
            }
            console.log('‚ö†Ô∏è Extracci√≥n con OCR result√≥ deficiente');
        } catch (ocrError) {
            console.error('‚ùå Error en OCR:', ocrError);
        }
        
        // 4. Como √∫ltimo recurso, intentar con el nuevo m√©todo de extracci√≥n como im√°genes
        try {
            console.log('üîÑ Intentando extracci√≥n como im√°genes (√∫ltimo recurso)...');
            const text = await extractTextFromPdfAsImages(buffer);
            
            if (!extraccionDeficiente(text)) {
                console.log('‚úÖ Extracci√≥n exitosa como im√°genes');
                return text;
            }
            console.log('‚ö†Ô∏è Extracci√≥n como im√°genes result√≥ deficiente');
        } catch (imageError) {
            console.error('‚ùå Error en extracci√≥n como im√°genes:', imageError);
        }
        
        throw new Error('Todos los m√©todos de extracci√≥n fallaron');
    } catch (error) {
        console.error('‚ùå Error general en la extracci√≥n del PDF:', error);
        throw error;
    }
}

// Funci√≥n para extraer texto con PDF.js
async function extractTextWithPDFJS(buffer) {
    try {
        console.log('üîç Intentando extracci√≥n con PDF.js...');
        
        const uint8Array = new Uint8Array(buffer);
        const loadingTask = getDocument({ data: uint8Array });
        const pdf = await loadingTask.promise;
        let text = '';
        
        for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const content = await page.getTextContent();
            const pageText = content.items
                .map(item => item.str)
                .join(' ');
            text += pageText + '\n';
        }
        
        text = sanitizeCVText(text);
        console.log('üìù Primeros 200 caracteres extra√≠dos con PDF.js:');
        console.log(text.substring(0, 200));
        
        return text.trim();
    } catch (error) {
        console.error('‚ùå Error en PDF.js:', error);
        throw error;
    }
}

// Funci√≥n para procesar archivos adjuntos (PDF y DOCX)
async function processCVFiles(archivosCV) {
    let processedDocs = [];

    for (let archivo of archivosCV) {
        try {
            const uniqueName = generateUniqueFileName(archivo.nombre);
            console.log('\nüîÑ Iniciando procesamiento de archivo:');
            console.log('----------------------------------------');
            console.log(`üìÅ Nombre Original: ${archivo.nombre}`);
            console.log(`üè∑Ô∏è Nombre √önico: ${uniqueName}`);
            
            let response = await axios.get(archivo.url, { 
                responseType: "arraybuffer",
                headers: {
                    'Content-Disposition': `attachment; filename="${uniqueName}"`
                }
            });
            
            console.log('üì• Archivo descargado correctamente');
            let buffer = Buffer.from(response.data);
            console.log(`üìä Tama√±o del buffer: ${buffer.length} bytes`);

            let extension = path.extname(uniqueName).toLowerCase();
            console.log(`üîç Extensi√≥n detectada: "${extension}"`);
            let extractedText = "";

            if (extension === ".pdf") {
                // Control adicional: ¬øes realmente un PDF?
                const fileTypeResult = await fileTypeFromBuffer(buffer);
                if (fileTypeResult && fileTypeResult.ext === 'docx') {
                    // Es un DOCX con extensi√≥n PDF, procesar como DOCX
                    extractedText = await extractTextFromDocx(buffer);
                    extractedText = sanitizeCVText(extractedText);
                } else {
                    // Es un PDF real, procesar normalmente
                    extractedText = await extractTextFromPDF(buffer);
                }
            } else if (extension === ".docx") {
                try {
                    extractedText = await extractTextFromDocx(buffer);
                    extractedText = sanitizeCVText(extractedText);
                } catch (docxError) {
                    console.error('‚ùå Error procesando DOCX:', docxError);
                    extractedText = `‚ö†Ô∏è Error al procesar DOCX: ${docxError.message}`;
                }
            } else {
                console.error(`‚ùå Extensi√≥n no compatible: "${extension}"`);
                extractedText = `‚ö†Ô∏è Formato no compatible: ${archivo.nombre}`;
            }

            processedDocs.push({
                nombre: archivo.nombre,
                texto: extractedText,
                fecha: archivo.fecha || new Date(),
                tama√±o: extractedText.length
            });

        } catch (error) {
            console.error('\n‚ùå Error en el procesamiento:');
            console.error('----------------------------------------');
            console.error(`Archivo: ${archivo.nombre}`);
            console.error('Error:', error.message);
            console.error('Stack:', error.stack);
            console.error('----------------------------------------\n');
            processedDocs.push({
                nombre: archivo.nombre,
                texto: `‚ö†Ô∏è No se pudo procesar: ${archivo.nombre}`,
                error: true
            });
        }
    }

    return processedDocs;
}

// Nueva funci√≥n para comparar y filtrar documentos similares
function calculateSimilarity(text1, text2) {
    // Simplificar los textos para comparaci√≥n
    const simplifyText = (text) => {
        return text.toLowerCase()
            .replace(/\s+/g, ' ')
            .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '')
            .trim()
            .split(' ')
            .slice(0, 1000)  // Tomar solo las primeras 1000 palabras para comparaci√≥n r√°pida
            .join(' ');
    };

    const simple1 = simplifyText(text1);
    const simple2 = simplifyText(text2);

    // Si son casi id√©nticos (m√°s del 90% igual), considerarlos duplicados
    const similarity = simple1.length > simple2.length 
        ? simple2.length / simple1.length 
        : simple1.length / simple2.length;

    console.log(`Similitud entre documentos: ${similarity * 100}%`);
    return similarity;
}

function filterSimilarDocuments(docs) {
    console.log('\nüîç Iniciando comparaci√≥n de documentos...');
    const uniqueDocs = [];
    const processed = new Set();

    for (let i = 0; i < docs.length; i++) {
        if (processed.has(i)) {
            console.log(`Saltando documento ${i} porque ya fue procesado`);
            continue;
        }
        
        let bestDoc = docs[i];
        processed.add(i);

        for (let j = i + 1; j < docs.length; j++) {
            if (processed.has(j)) continue;

            const similarity = calculateSimilarity(docs[i].texto, docs[j].texto);
            console.log(`Similitud entre doc ${i} y doc ${j}: ${similarity * 100}%`);

            // Si la similitud es mayor a 0.8 (80%)
            if (similarity > 0.8) {
                console.log(`¬°Documentos similares encontrados! ${docs[i].nombre} y ${docs[j].nombre}`);
                processed.add(j); // Marcar el documento similar como procesado
                
                // Quedarnos con el m√°s largo
                if (docs[j].texto.length > bestDoc.texto.length) {
                    console.log(`Seleccionando el m√°s largo: ${docs[j].nombre}`);
                    bestDoc = docs[j];
                } else {
                    console.log(`Manteniendo el original: ${bestDoc.nombre}`);
                }
                
                // No agregar el documento similar a uniqueDocs
                continue;
            }
        }

        // Solo agregar el mejor documento encontrado
        console.log(`Agregando documento √∫nico: ${bestDoc.nombre}`);
        uniqueDocs.push(bestDoc);
    }

    console.log(`\nResumen final:`);
    console.log(`- Documentos originales: ${docs.length}`);
    console.log(`- Documentos √∫nicos: ${uniqueDocs.length}`);
    console.log(`- Documentos eliminados por similitud: ${docs.length - uniqueDocs.length}`);

    return uniqueDocs;
}

// Funci√≥n principal para analizar candidato
export const analyzeCandidate = async (jobDescription, candidateInfo) => {
    try {
        // Primero, loguear los datos recibidos
        console.log('\n\nüîç DATOS RECIBIDOS EN ANALYZE CANDIDATE:');
        console.log('----------------------------------------');
        console.log('Job Description:', jobDescription);
        console.log('Candidate Info:', candidateInfo);
        console.log('----------------------------------------\n');

        // Procesar archivos CV y extraer texto
        const processedDocs = await processCVFiles(candidateInfo.archivosCV || []);
        
        // Filtrar documentos similares
        const uniqueDocs = filterSimilarDocuments(processedDocs);
        
        console.log(`Reducido de ${processedDocs.length} a ${uniqueDocs.length} documentos √∫nicos`);
        
        // Concatenar los documentos √∫nicos
        const CVdetalle = uniqueDocs
            .map(doc => {
                // Verificar y convertir a string si es necesario
                const textoSeguro = typeof doc.texto === 'string' 
                    ? doc.texto 
                    : JSON.stringify(doc.texto);
                    
                return `\n\nüìÑ [${doc.nombre}]\n${textoSeguro}`;
            })
            .join('');

        // Debug
        console.log('Tipo de CVdetalle:', typeof CVdetalle);
        console.log('Primeros 500 caracteres de CVdetalle:', CVdetalle.substring(0, 500));

        // Simplificar y limpiar los datos del trabajo
        const jobData = {
            // Informaci√≥n b√°sica
            titulo: jobDescription.titulo ?? '',
            area: jobDescription.area ?? '',
            descripcion: jobDescription.descripcion ?? '',
            requisitos: jobDescription.requisitos ?? '',
            
            // Modalidad y tipo
            modalidad: jobDescription.modalidadTrabajo ?? '',
            tipo: jobDescription.tipoTrabajo ?? '',
            tipoDeContratacion: jobDescription.tipoDeContratacion ?? '',
            modalidadDeContratacion: jobDescription.modalidadDeContratacion ?? '',
            
            // Ubicaci√≥n
            ubicacion: {
                pais: jobDescription.ubicacion?.pais ?? '',
                provincia: jobDescription.ubicacion?.provincia ?? '',
                ciudad: jobDescription.ubicacion?.ciudad ?? ''
            },
            
            // Informaci√≥n de la empresa y √°rea
            descripcionEmpresa: jobDescription.descripcionEmpresa ?? '',
            areaTrabajo: jobDescription.areaTrabajo ?? '',
            descripcionTrabajo: jobDescription.descripcionTrabajo ?? '',
            
            // Requisitos educativos
            estadoNivelEducacion: jobDescription.estadoNivelEducacion ?? '',
            nivelMinimoEducacion: jobDescription.nivelMinimoEducacion ?? '',
            requisitoSecundarioCompleto: jobDescription.requisitoSecundarioCompleto ?? '',
            
            // Requisitos espec√≠ficos
            requisitoIdioma: jobDescription.requisitoIdioma ?? '',
            idioma: jobDescription.idioma ?? '',
            requisitoReubicacionLaboral: jobDescription.requisitoReubicacionLaboral ?? '',
            requisitoDisponibilidadHoraria: jobDescription.requisitoDisponibilidadHoraria ?? '',
            requisitoGenero: jobDescription.requisitoGenero ?? '',
            
            // Jerarqu√≠a y g√©nero
            jerarquia: jobDescription.jerarquia ?? '',
            genero: jobDescription.genero ?? ''
        };

        // Simplificar y limpiar los datos del candidato
   // Simplificar y limpiar los datos del candidato
const candidateData = {
    // Datos personales
    datosPersonales: {
        nombre: candidateInfo.datosPersonales?.nombre || '',
        apellido: candidateInfo.datosPersonales?.apellido || '',
        email: candidateInfo.datosPersonales?.email || '',
        telefono: candidateInfo.datosPersonales?.telefonoCelular || candidateInfo.datosPersonales?.telefonoFijo || '',
        fechaNacimiento: candidateInfo.datosPersonales?.fechaNacimiento || '',
        genero: candidateInfo.datosPersonales?.genero || '',
        nacionalidad: candidateInfo.datosPersonales?.nacionalidad || ''
    },

    // Ubicaci√≥n
    ubicacion: candidateInfo.direccion ? {
        pais: candidateInfo.direccion.pais || '',
        provincia: candidateInfo.direccion.provincia || '',
        ciudad: candidateInfo.direccion.ciudad || '',
        direccion: candidateInfo.direccion.direccion || ''
    } : {},

    // Presentaci√≥n y perfil profesional
    presentacion: candidateInfo.presentacion || '',
    redesSociales: candidateInfo.redesSociales || {},

    // Experiencia laboral
    experiencia: (candidateInfo.experiencia || []).map(exp => ({
        puesto: exp.puesto || '',
        empresa: exp.empresa || '',
        periodo: exp.periodo || '',
        descripcion: exp.descripcion || '',
        area: exp.area || '',
        subArea: exp.subArea || '',
        industria: exp.industria || '',
        seniority: exp.seniority || '',
        trabajoActual: exp.trabajoActual || false,
        pais: exp.pais || ''
    })),

    // Formaci√≥n acad√©mica
    estudios: (candidateInfo.estudios || []).map(edu => ({
        titulo: edu.titulo || '',
        institucion: edu.institucion || '',
        periodo: edu.periodo || '',
        nivel: edu.nivel || '',
        estado: edu.estado || '',
        area: edu.area || '',
        pais: edu.pais || '',
        descripcion: edu.descripcion || ''
    })),

    // Conocimientos y habilidades
    conocimientos: (candidateInfo.conocimientos || []).map(con => ({
        tipo: con.tipo || '',
        nombre: con.nombre || '',
        nivel: con.nivel || '',
        calificacion: con.calificacion || '',
        descripcion: con.descripcion || ''
    })),

    // Referencias
    referencias: (candidateInfo.referencias || []).map(ref => ({
        nombre: ref.nombre || '',
        apellido: ref.apellido || '',
        relacion: ref.relacion || '',
        telefono: ref.telefono || '',
        email: ref.email || '',
        descripcion: ref.descripcion || ''
    })),

    // Disponibilidad
    disponibilidad: {
        horaria: candidateInfo.disponibilidadHoraria || '',
        relocacion: candidateInfo.disponibilidadRelocacion || ''
    },

    // Estado actual
    etapa: candidateInfo.etapa || '',

    // Documentos
    archivosCV: (candidateInfo.archivosCV || []).map(archivo => ({
        nombre: archivo.nombre || '',
        url: archivo.url || ''
    })),
    CVdetalle: await processCVFiles(candidateInfo.archivosCV || [])
};

        // Loguear datos procesados
        console.log('\nüìù DATOS PROCESADOS:');
        console.log('----------------------------------------');
        console.log('Job Data:', JSON.stringify(jobData, null, 2));
        console.log('Candidate Data:', JSON.stringify(candidateData, null, 2));
        console.log('----------------------------------------\n');
     
        // Construir el prompt usando SOLO los documentos √∫nicos
     const cvTexto = uniqueDocs
     .map(doc => `
         // Documento: ${doc.nombre}
         ${doc.texto}
     `)
     .join('\n\n');
// Funci√≥n para limpiar y preparar el texto del CV
const prepararCVTexto = (texto) => {
    if (!texto) return '';
    return texto
        .replace(/[\n\r]/g, ' ')         // Reemplaza saltos de l√≠nea por espacios
        .replace(/\s+/g, ' ')            // Reemplaza m√∫ltiples espacios por uno solo
        .replace(/"/g, "'")              // Reemplaza comillas dobles por simples
        .replace(/\\/g, '/')             // Reemplaza backslashes
        .trim()                          // Elimina espacios al inicio y final
        .substring(0, 1000);             // Limita a 1000 caracteres
};

        const prompt = `
        Necesito un an√°lisis de compatibilidad entre un candidato y un puesto de trabajo con una visi√≥n de reclutador de recursos humanos.
        IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.
       


       <<< INSTRUCCIONES CR√çTICAS para Generar la respuesta >>>

                CRITERIOS EXCLUYENTES:
                Un candidato ser√° considerado "NO CUMPLE" si no cumple con al menos uno de los siguientes criterios:

  
                1. Ubicaci√≥n:

                    - Si el puesto especifica una o varias ubicaciones (ciudades, provincias, pa√≠ses o regiones), el candidato debe residir en al menos una de ellas o en una zona geogr√°fica que pertenezca claramente a esa ubicaci√≥n.

                    - Considerar v√°lidas las siguientes coincidencias jer√°rquicas (por pertenencia geogr√°fica):
                    - **Barrios** dentro de una **ciudad**. Ejemplo: "Villa Lugano" debe considerarse parte de "Capital Federal" o "CABA".
                    - **Ciudades o partidos** dentro de una **provincia o regi√≥n metropolitana**. Ejemplo: "Avellaneda" o "San Mart√≠n" deben considerarse parte del "Gran Buenos Aires".
                    - **Provincias o estados** dentro de un **pa√≠s**. Ejemplo: "C√≥rdoba" ‚àà "Argentina".
                    - **Pa√≠ses o provincias** dentro de una **regi√≥n amplia**. Ejemplo: "Argentina" ‚àà "LATAM", "Patagonia" ‚àà "Argentina".

                    - Usar una l√≥gica flexible de inclusi√≥n geogr√°fica. Por ejemplo:
                    - Si el puesto requiere **"Capital Federal"** o **"CABA"**, tambi√©n se aceptan los siguientes barrios:
                        Villa Lugano, Villa Riachuelo, Liniers, Recoleta, Palermo, Belgrano, Caballito, entre otros barrios oficiales de la Ciudad Aut√≥noma de Buenos Aires.
                    - Si el puesto requiere **"Gran Buenos Aires"** o **"GBA"**, se aceptan partidos como:
                        Avellaneda, Lan√∫s, Lomas de Zamora, Quilmes, San Isidro, Vicente L√≥pez, San Mart√≠n, La Matanza, Tres de Febrero, entre otros partidos lim√≠trofes con CABA.
                    - Si el puesto requiere **"Buenos Aires"** sin especificar, se deben aceptar tanto CABA como el GBA, salvo que se indique expl√≠citamente lo contrario.
                    - Si el puesto requiere **"LATAM"**, cualquier pa√≠s de Am√©rica Latina es v√°lido.

                    - **Importante**: la modalidad del puesto (remoto, h√≠brido, presencial) **no modifica este criterio excluyente**. Se eval√∫a √∫nicamente la ubicaci√≥n actual de residencia del candidato, no su disponibilidad para trasladarse.


                2. Idioma:
                - Si el puesto exige un idioma a un nivel espec√≠fico, debe cumplirse.
                - Si el idioma est√° mencionado como "preferentemente" o "deseable", NO es excluyente.

                3. Otros:
                - Solo deben considerarse excluyentes aquellos criterios marcados como tales en la descripci√≥n.
                - No asumir que algo es excluyente si no est√° expresamente indicado.

                Si el candidato no cumple con al menos uno de estos criterios excluyentes, debe devolverse:
                "respuesta": "No" con justificaci√≥n detallada, indicando:
                - Lista de criterios excluyentes requeridos
                - Cu√°les cumple y cu√°les no
                - Por qu√© no cumple

                Si cumple todo, entonces:
                "respuesta": "S√≠" con justificaci√≥n detallada de todos los criterios cumplidos.

                BLOQUES DE RESPUESTA:

                1. "Cumplimiento de requisitos excluyentes":
                - Campo "respuesta": debe ser "S√≠" o "No".
                - Campo "justificaci√≥n": detallar TODOS los criterios que aplican, marcar cu√°les se cumplen y cu√°les no, con ejemplos claros del CV o la info del candidato, lugar de residencia o idiomas.
                - La justificacion debe ser precisa y contundente.


                2. "Aptitud general para el puesto":
                - Redactar un an√°lisis t√©cnico y cualitativo del ajuste del candidato al perfil.
                - Explicar claramente c√≥mo se lleg√≥ al puntaje final
                - Explicar por qu√© ser√≠a (o no) una buena opci√≥n.
                - Fundamentar con evidencias del CV y del formulario.
                - Pensar como un reclutador que justifica una recomendaci√≥n ante un cliente.
                 - Detallar qu√© aspectos fueron determinantes
                - Mencionar qu√© podr√≠a mejorar el puntaje


 

                3. "Fortalezas identificadas":
                - Listar hasta 7 fortalezas que surjan expl√≠citamente del CV o los datos del candidato.
                - Pueden ser t√©cnicas o de soft skills.
                - No inventar ni inferir.
                - Indicar evidencia para cada fortaleza (ej: "Experiencia en COBOL (5 a√±os en Banco XYZ)").
                - Incluir el peso de cada fortaleza en la evaluaci√≥n



                4. "Debilidades o √°reas de mejora":
                - Listar hasta 7 debilidades si est√°n claramente presentes.
                - No inventar. No inferir. Basarse solo en datos provistos.
                - Indicar el impacto de cada una en la adecuaci√≥n.
                - Incluir sugerencias espec√≠ficas de mejora cuando sea posible

                5. "Calificaci√≥n de adecuaci√≥n":
                - Campo "calificaci√≥n": n√∫mero entero del 1 al 10, sin excepciones. Nunca usar -1 ni -2. Si el candidato no cumple ning√∫n requisito, devolver el m√≠nimo permitido: 1.
                - Campo "justificaci√≥n": analizar cada requisito, indicar si fue cumplido, parcialmente cumplido o no cumplido. Mencionar roles, herramientas, estudios y argumentos claros que respalden cada punto. Concluir con un razonamiento que fundamente la calificaci√≥n.
                - La "justificaci√≥n" DEBE incluir:
                    * Un desglose num√©rico de cada criterio evaluado
                    * Ejemplo: "Technical (40%): 8/10, Experience (25%): 7/10, Education (15%): 9/10..."
                    * Para cada criterio, explicar por qu√© se dio ese puntaje
                    * Listar espec√≠ficamente qu√© requisitos se cumplieron y cu√°les no
                    * Explicar por qu√© no es un puntaje mayor o menor
                    * Citar evidencia espec√≠fica del CV para cada evaluaci√≥n

                6. "contactos":
                - Extraer desde el texto del CV o candidateInfo todos los datos de contacto detectados.
                - Incluir email, tel√©fonos y redes sociales (sin URLs completas).
                - No repetir datos. Una sola ocurrencia por tipo.
                - Ejemplo: "contactos": { "datos": "email@ejemplo.com 3511234567 linkedin: juanperez123 github: jperez" }

                C√ÅLCULO DE SCORES INDIVIDUALES (0 a 100):
                - Evalu√° cada uno como una "nota escolar". Cuanto mayor el ajuste, mayor el score.
                - Si el perfil no especifica el criterio, asignar 100 por omisi√≥n.
                

                1. technical (40%):
                - Coincidencia entre skills t√©cnicos requeridos y habilidades del candidato.

                2. experience (25%):
                - Nivel de experiencia laboral real y demostrada en uso de esas tecnolog√≠as.

                3. education (15%):
                - Ajuste entre la formaci√≥n acad√©mica y certificaciones del candidato vs. lo solicitado.

                4. years (10%):
                - Comparar a√±os de experiencia requeridos con los a√±os que muestra el candidato.
                - Si cumple o supera ‚Üí 100
                - Si no cumple ‚Üí proporcional. Ej: tiene 2 a√±os y se piden 3 ‚Üí (2/3) * 100 = 66
                - Redondear al entero m√°s cercano.
                - Si no se menciona cantidad de a√±os ‚Üí score = 100

                5. location (5%):
                - Si cumple con la ubicaci√≥n solicitada ‚Üí 100
                - Si no cumple ‚Üí 0
                - Si no se especifica ubicaci√≥n ‚Üí 100

                6. tags (5%):
                - Por ahora, siempre = 100

                totalScore = (technical * 0.4) + (experience * 0.25) + (education * 0.15) + (years * 0.1) + (location * 0.05) + (tags * 0.05)

                - Redondear el totalScore a n√∫mero entero.
                

                <<< FIN INSTRUCCIONES >>>
       
       Esta es la informaci√≥n del puesto de trabajo:
       
       
        // Informaci√≥n b√°sica del puesto de trabajo
        - T√≠tulo: ${jobData.titulo}
        - √Årea: ${jobData.area}
        - Descripci√≥n: ${jobData.descripcion}
        - Requisitos: ${jobData.requisitos}
        
        // Modalidad y tipo
        - Modalidad de Trabajo: ${jobData.modalidad}
        - Tipo de Trabajo: ${jobData.tipo}
        - Tipo de Contrataci√≥n: ${jobData.tipoDeContratacion}
        - Modalidad de Contrataci√≥n: ${jobData.modalidadDeContratacion}
        
        // Ubicaci√≥n
        - Ubicaci√≥n: 
          * Pa√≠s: ${jobData.ubicacion.pais}
          * Provincia: ${jobData.ubicacion.provincia}
          * Ciudad: ${jobData.ubicacion.ciudad}
        
        // Informaci√≥n de la empresa y √°rea
        - Descripci√≥n de la Empresa: ${jobData.descripcionEmpresa}
        - √Årea de Trabajo: ${jobData.areaTrabajo}
        - Descripci√≥n del Trabajo: ${jobData.descripcionTrabajo}
        
        // Requisitos educativos
        - Estado Nivel Educaci√≥n: ${jobData.estadoNivelEducacion}
        - Nivel M√≠nimo Educaci√≥n: ${jobData.nivelMinimoEducacion}
        - Requisito Secundario Completo: ${jobData.requisitoSecundarioCompleto}
        
        // Requisitos espec√≠ficos
        - Requisito Idioma: ${jobData.requisitoIdioma}
        - Idioma: ${jobData.idioma}
        - Requisito Reubicaci√≥n Laboral: ${jobData.requisitoReubicacionLaboral}
        - Requisito Disponibilidad Horaria: ${jobData.requisitoDisponibilidadHoraria}
        - Requisito G√©nero: ${jobData.requisitoGenero}
        
        // Jerarqu√≠a y g√©nero
        - Jerarqu√≠a: ${jobData.jerarquia}
        - G√©nero: ${jobData.genero}

        
INFORMACI√ìN DEL CANDIDATO:
 Informacion de su Curriculum Vitae
  * Curriculum Vitae pasado a texto: ${prepararCVTexto(cvTexto)}

 Datos de contacto del candidato
  * email: ${candidateInfo.datosPersonales?.email}
  * telefono: ${candidateInfo.datosPersonales?.telefonoCelular}
  *  telefono otro: ${candidateInfo.datosPersonales?.telefonoFijo}

 Datos personales y ubicaci√≥n
- Ubicaci√≥n: 
  * Pa√≠s: ${candidateData.ubicacion.pais}
  * Provincia: ${candidateData.ubicacion.provincia}
  * Ciudad: ${candidateData.ubicacion.ciudad}
  * Direcci√≥n: ${candidateData.ubicacion.direccion}

 Presentaci√≥n y perfil profesional
- Presentaci√≥n: ${candidateData.presentacion}
- Redes Sociales: ${Object.entries(candidateData.redesSociales)
    .filter(([_, value]) => value)
    .map(([key, value]) => `${key}: ${value}`)
    .join(', ')}

// Experiencia laboral
- Experiencia Laboral:
${candidateData.experiencia.map(e => 
`  * ${e.puesto} en ${e.empresa}
    Per√≠odo: ${e.periodo}
    √Årea: ${e.area}
    Sub-√°rea: ${e.subArea}
    Industria: ${e.industria}
    Seniority: ${e.seniority}
    Pa√≠s: ${e.pais}
    Trabajo Actual: ${e.trabajoActual ? 'S√≠' : 'No'}
    Descripci√≥n: ${e.descripcion}`
).join('\n')}

// Formaci√≥n acad√©mica
- Formaci√≥n:
${candidateData.estudios.map(e => 
`  * ${e.titulo} - ${e.institucion}
    Per√≠odo: ${e.periodo}
    Nivel: ${e.nivel}
    Estado: ${e.estado}
    √Årea: ${e.area}
    Pa√≠s: ${e.pais}
    Descripci√≥n: ${e.descripcion}`
).join('\n')}

// Conocimientos y habilidades
- Conocimientos y Habilidades:
${candidateData.conocimientos.map(c => 
`  * ${c.nombre} (${c.tipo})
    Nivel: ${c.nivel}
    Calificaci√≥n: ${c.calificacion}
    Descripci√≥n: ${c.descripcion}`
).join('\n')}

// Disponibilidad
- Disponibilidad:
  * Horaria: ${candidateData.disponibilidad.horaria}
  * Reubicaci√≥n: ${candidateData.disponibilidad.relocacion}

Adem√°s, deber√°s detectar si la ubicaci√≥n f√≠sica del candidato cumple con lo requerido por el puesto. Si el trabajo es presencial o semipresencial (h√≠brido) y el candidato no reside en la ciudad del puesto ni declara disponibilidad de reubicaci√≥n, deber√°s marcarlo como un incumplimiento en los requisitos excluyentes. No consideres la ubicaci√≥n como excluyente en puestos 100% remotos, salvo que se indique expl√≠citamente una limitaci√≥n geogr√°fica.

   
Por favor, toma el rol de analista de recursos humanos en proceso de reclutamiento y
analiza la compatibilidad entre el candidato y el puesto de trabajo y responde con 
el siguiente formato (Respete estrictamente el formato de la respuesta en formato JSON tal como se pide a continuacion):
         IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.
{
    "Cumplimiento de requisitos excluyentes": {
        "respuesta": "S√≠/No",
        "justificaci√≥n": "Explicaci√≥n detallada"
    },
    "Aptitud general para el puesto": "Explicaci√≥n detallada",
    "Fortalezas identificadas": [
        "Fortaleza 1",
        "Fortaleza 2",
        "Fortaleza 3"
    ],
    "Debilidades o √°reas de mejora": [
        "Debilidad 1",
        "Debilidad 2",
        "Debilidad 3"
    ],
    "Calificaci√≥n de adecuaci√≥n": {
        "calificaci√≥n": "N√∫mero entero del 1 al 10. Nunca usar valores fuera de este rango, ni negativos, ni 0. Si el ajuste es nulo, devolver el m√≠nimo permitido: 1.",
        "justificaci√≥n": "Detallar uno por uno los requisitos del puesto y cruzarlos con la informaci√≥n concreta que aparece en el CV del candidato. Para cada requisito, indicar si est√° cumplido, parcialmente cumplido o ausente, explicando con precisi√≥n por qu√© (citando roles, herramientas, estudios u otros elementos del CV como evidencia). Luego de este an√°lisis, justificar num√©ricamente la calificaci√≥n general entre 1 y 10 en funci√≥n del grado de ajuste observado."
    },
    "cuestionario": {
        "preguntas_psicologicas": [
            {
                "numero": 1,
                "pregunta": "texto de la pregunta",
                "opciones": {
                    "A": "texto opci√≥n A",
                    "B": "texto opci√≥n B",
                    "C": "texto opci√≥n C",
                    "D": "texto opci√≥n D"
                },
                "respuesta_correcta": "letra",
                "explicacion": "explicaci√≥n de la respuesta correcta"
            }
        ],
        "preguntas_tecnicas": [
            {
                "numero": 1,
                "pregunta": "texto de la pregunta",
                "opciones": {
                    "A": "texto opci√≥n A",
                    "B": "texto opci√≥n B",
                    "C": "texto opci√≥n C",
                    "D": "texto opci√≥n D"
                },
                "respuesta_correcta": "letra",
                "explicacion": "explicaci√≥n de la respuesta correcta"
            }
        ]
    },
    "contactos": { "datos": "Incluir aca si en la informaci√≥n del candidato se encuentra email o cualquier telefono uno al lado del otro separado por espacios. Busque en el texto del curriculum Vitae para ver si ahi hay datos de contacto y agreguelos aca."}
}

Si la calificaci√≥n es 10 o menor, el objeto "cuestionario" debe estar vac√≠o excepto la pregunta numero 1 
de las preguntas psicologicas que debe tener este formato ya que en el campo explicacion de esa pregunta
quiero guardar el CV pasado a texto que mas arriba se informo como 
"Informacion de su Curriculum Vitae -Curriculum Vitae pasado a texto". 
Por favor coloquelo (asegurandose de no superar los 1000 caracteres) en el campo explicacion y asegurese de cerrar bien el JSON con la llave de salida
         IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.   

"cuestionario": {
        "preguntas_psicologicas": [
            {
                "numero": 1,
                "pregunta": "Contenido del CV pasado a texto",
                "opciones": {
                    "A": "texto opci√≥n A",
                    "B": "texto opci√≥n B",
                    "C": "texto opci√≥n C",
                    "D": "texto opci√≥n D"
                },
                "respuesta_correcta": "A,B,C o D de acuerdo a si los archivos son 1,2,3 o 4 respectivamente o 4 si tambien son mas de 4",
                "explicacion": "${prepararCVTexto(cvTexto)}"
            }
        ]
    }
`;



        // Loguear el prompt
        console.log('\nüì§ PROMPT ENVIADO A OPENAI:');
        console.log('INICIO DEL PROMPT----------------------------------------');
        console.log(prompt);
        console.log('FIN DEL PROMPT----------------------------------------\n');

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            //model: "gpt-4",
            messages: [{ 
                role: "user", 
                content: prompt 
            }],
            temperature: 0.7,
        });

        // ‚úÖ NUEVO BLOQUE para tokens
        const usage = completion.usage || {};
        const model = completion.model || "desconocido";

        // Definir precios por modelo (solo gpt-4o-mini)
        const PRECIOS = {
            "gpt-4o-mini": {
              input:  0.0006,  // USD por 1 000 tokens de entrada
              output: 0.0024   // USD por 1 000 tokens de salida
            }
          };
          
          // C√°lculo "exacto" (no redondeos)
          const precios      = PRECIOS["gpt-4o-mini"];
          const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
          const tokensOutput = usage.completion_tokens;   // p. ej. 1072
          
          const costoInput  = (tokensInput  / 1000) * precios.input;
          const costoOutput = (tokensOutput / 1000) * precios.output;
          const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;
 
        const tokenInfo = {
            modelo: model,
            tokens_prompt: usage.prompt_tokens || 0,
            tokens_respuesta: usage.completion_tokens || 0,
            tokens_total: usage.total_tokens || 0,
            costo_input: costoInput.toFixed(4),
            costo_output: costoOutput.toFixed(4),
            costo_total: costoTotal.toFixed(4),
            fecha: new Date(),
            usuario:  "desconocido",
            consulta: "analyzeCandidate"
        };
        await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);



   


        const response = completion.choices[0].message.content;
        
        // Loguear la respuesta
        console.log('\nüì• RESPUESTA VALIDA HOY DE OPENAI:');
        console.log('----------------------------------------');
        console.log(response);
        console.log('----------------------------------------\n');


        try {
           const parsedResponse = JSON.parse(response);
           
            return parsedResponse;
        } catch (error) {
            console.error('Error parseando respuesta de OpenAI:', error);
            return {
                "Cumplimiento de requisitos excluyentes": {
                    "respuesta": "No",
                    "justificaci√≥n": `${response}`
                },
                "Aptitud general para el puesto": "Informaci√≥n insuficiente para evaluar",
                "Fortalezas identificadas": [],
                "Debilidades o √°reas de mejora": [],
                "Calificaci√≥n de adecuaci√≥n": {
                    "calificaci√≥n": -1,
                    "justificaci√≥n": `${response}`
                },
                "cuestionario": {}
            };
        }
    } catch (error) {
        // Loguear errores
        console.error('\n‚ùå ERROR EN ANALYZE CANDIDATE:');
        console.error('----------------------------------------');
        console.error('Error completo:', error);
        console.error('----------------------------------------\n');

        // Devolver objeto JSON con calificaci√≥n -2 (error t√©cnico)
        return {
            "Cumplimiento de requisitos excluyentes": {
                "respuesta": "No",
                "justificaci√≥n": "Error t√©cnico en la API de OpenAI"
            },
            "Aptitud general para el puesto": "No se pudo evaluar por error t√©cnico",
            "Fortalezas identificadas": [],
            "Debilidades o √°reas de mejora": [],
            "Calificaci√≥n de adecuaci√≥n": {
                "calificaci√≥n": -2,
                "justificaci√≥n": `Error t√©cnico: ${error.message}. Por favor, intente m√°s tarde.`
            },
            "cuestionario": {}
        };
    }
};

// ... existing imports y c√≥digo ...
const convertGPTResponseToDoc = async (content, type) => {
    try {
        // Usar un template b√°sico para los informes
        const template = fs.readFileSync(path.join(__dirname, '../templates/report_template.docx'), 'binary');
        const zip = new PizZip(template);
        const doc = new Docxtemplater(zip);

        doc.setData({
            content: content,
            date: new Date().toLocaleDateString(),
            type: type
        });

        doc.render();

        return doc.getZip().generate({ type: 'nodebuffer' });
    } catch (error) {
        console.error('Error convirtiendo respuesta a DOCX:', error);
        throw error;
    }
};
const generateCompanyReport = async (postulantInfo) => {
    try {
        const prompt = `
        Genera un informe profesional para la empresa sobre el candidato ${postulantInfo.nombre} ${postulantInfo.apellido}.
        
        Informaci√≥n del candidato:
        ${JSON.stringify(postulantInfo, null, 2)}

        El informe debe incluir:
        1. Evaluaci√≥n de habilidades
        2. Experiencia relevante
        3. Formaci√≥n acad√©mica
        4. Recomendaciones
        
        Formato: Documento formal tipo informe empresarial.
        Estructura el informe con:
        - Encabezado con fecha y datos del candidato
        - Secciones claramente definidas
        - Conclusiones y recomendaciones al final
        - Firma del equipo de reclutamiento

        Tono: Profesional y objetivo, enfocado en las fortalezas del candidato.
        `;

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            temperature: 0.7,
        });

        return await convertGPTResponseToDoc(completion.choices[0].message.content, 'company');
    } catch (error) {
        console.error('Error generando informe para empresa:', error);
        throw error;
    }
};

const generateOperationsReport = async (postulantInfo) => {
    try {
        const prompt = `
        Genera un informe interno para el √°rea de operaciones sobre el proceso de selecci√≥n del candidato ${postulantInfo.nombre} ${postulantInfo.apellido}.
        
        Informaci√≥n del candidato:
        ${JSON.stringify(postulantInfo, null, 2)}

        El informe debe incluir:
        1. Detalle del proceso de selecci√≥n
           - Canales de reclutamiento utilizados
           - Tiempo del proceso
           - Etapas completadas
        
        2. Evaluaci√≥n t√©cnica
           - Habilidades validadas
           - √Åreas de mejora identificadas
           - Comparaci√≥n con requisitos del puesto
        
        3. Evaluaci√≥n de soft skills
           - Comunicaci√≥n
           - Trabajo en equipo
           - Adaptabilidad
        
        4. Aspectos log√≠sticos
           - Disponibilidad
           - Expectativas salariales
           - Tiempos de incorporaci√≥n
        
        5. Recomendaciones para el proceso
           - Mejoras identificadas
           - Puntos a considerar en futuros procesos
        
        Formato: Documento formal tipo informe interno.
        Incluir:
        - Fecha y c√≥digo de proceso
        - M√©tricas relevantes
        - Observaciones espec√≠ficas del proceso
        - Firma del equipo de operaciones
        
        Tono: T√©cnico y detallado, orientado a la mejora de procesos.
        `;

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            temperature: 0.7,
        });

        return await convertGPTResponseToDoc(completion.choices[0].message.content, 'operations');
    } catch (error) {
        console.error('Error generando informe de operaciones:', error);
        throw error;
    }
};

export const generateCurriculumFichaOS = async (postulantInfo, archivos, analisisPostulante, templatePath) => {
    try {
        console.log('\nüîÑ Iniciando generaci√≥n de ficha OneSelect');
        const processedDocs = await processCVFiles(archivos);
        const cvText = processedDocs.map(doc => doc.texto).join('\n\n');
        const resumenAnalisis = analisisPostulante ? `
 AN√ÅLISIS DEL CANDIDATO:
 
 Presentaci√≥n del Postulante:
 ${postulantInfo.presentacionPostulante || 'No especificada'}
 
 
 Aptitud General para el Puesto:
 ${analisisPostulante.aptitudParaPuesto || 'No especificada'}
 
 Fortalezas Identificadas:
 ${analisisPostulante.fortalezas ? 
   analisisPostulante.fortalezas.map(f => `‚Ä¢ ${f}`).join('\n') : 
   'No especificadas'}
 
 √Åreas de Mejora:
 ${analisisPostulante.debilidades ? 
   analisisPostulante.debilidades.map(d => `‚Ä¢ ${d}`).join('\n') : 
   'No especificadas'}
 
 Evaluaci√≥n de Requisitos:
 ${analisisPostulante.justificacionRequisitos || 'No disponible'}
 ` : 'No hay an√°lisis previo disponible' + (postulantInfo.presentacionPostulante ? `\n\nPresentaci√≥n del Postulante:\n${postulantInfo.presentacionPostulante}` : '');




        const prompt = `
         Este prompt tiene como objetivo generar una ficha curricular estructurada, completa y profesional del perfil de un/a postulante, basada en su CV original, pensada desde la mirada de una reclutadora para ser presentada a un cliente final.

El resultado debe:
- Reflejar fielmente las competencias, experiencias y formaci√≥n de la persona.
- Excluir **datos personales sensibles o de contacto** (tel√©fono, email, direcci√≥n, documento, etc.).
- Presentar la informaci√≥n en un formato claro, estandarizado y sin adornos innecesarios.
- Estar redactado en **tercera persona**, con lenguaje profesional y objetivo.
- Ser completamente **parseable como JSON**, manteniendo la estructura exacta requerida.

INFORMACI√ìN DEL POSTULANTE:
${JSON.stringify(postulantInfo, null, 2)}

CONTENIDO DEL CV ORIGINAL:
${cvText}

${analisisPostulante ? `
AN√ÅLISIS PREVIO DEL POSTULANTE:
${JSON.stringify(analisisPostulante, null, 2)}
` : ''}

       TRADUCCI√ìN:
            Antes de estructurar la informaci√≥n, traduc√≠ TODO el contenido del CV y cualquier parte del an√°lisis que est√© en ingl√©s al ESPA√ëOL NEUTRO. No debe quedar ninguna frase en ingl√©s. No mantengas t√≠tulos de cursos, descripciones de trabajos ni herramientas sin traducir. Us√° traducciones naturales y profesionales, no traducciones literales ni palabra por palabra.

            Luego de traducirlo internamente, complet√° el JSON respetando el resto de las instrucciones.

            ‚ö†Ô∏è Si el resultado incluye texto en ingl√©s ser√° considerado incorrecto. No debe haber frases, descripciones ni t√≠tulos sin traducir. Toda la informaci√≥n debe estar redactada en un espa√±ol correcto, sin errores gramaticales ni de traducci√≥n literal.

            INSTRUCCIONES PARA LA ESTRUCTURA:
                     IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.   
            Genera un JSON con EXACTAMENTE esta estructura:
{
  "nombre": "string",
  "apellido": "string",
  "profesion": "string",
  "rol": "string",
  "edad": "string",
  "fechaNacimiento": "string",
  "zonaResidencia": "string",
  "estadoCivil": "string",
  "composicionFamiliar": "string",
  "nacionalidad": "string",
  "movilidadPropia": "string",
  "formacionAcademica": [{
    "institucion": "string",
    "titulo": "string",
    "fechaInicio": "string",
    "fechaFin": "string"
  }],
  "cursos": [{
    "nombreCurso": "string",
    "anioCurso": "string",
    "institucionCurso": "string"
  }],
  "aptitudes": ["string"],
  "habilidades": {
                "lenguajesProgramacion": ["string"],
                "basesDeDatos": ["string"],
                "metodologias": ["string"],
                "otros": ["string"]
            },
  "trayectoria": [{
    "periodo": "string",
    "empresa": "string",
    "puesto": "string",
    "funciones": "string",
    "motivoEgreso": "string"
  }],
  "AniosExperiencia": "string",
  "AreaExperiencia": "string",
  "empresaactual": "string",
  "observaciones": "string (Incluir aqu√≠ un resumen del an√°lisis previo si existe)",
  "hobbies": "string",
  "compromisosProximos": "string",
  "otrosProcesos": "string",
  "carnetConducir": "string",
  "antecedentes": "string"
}


REGLAS:
            1. Mant√©n EXACTAMENTE la misma estructura.
            2. El CONTENIDO DEL CV ORIGINAL contiene informaci√≥n valiosa para completar los campos: utilizala a fondo.
            3. Complet√° todos los campos posibles con la informaci√≥n disponible. 
                    Si no hay informaci√≥n para un campo, us√° "" para strings y [] para arrays.
            4. Clasific√° correctamente las habilidades en sus categor√≠as.
                Categorizar todas las tecnolog√≠as mencionadas aunque aparezcan una sola vez:

                - lenguajesProgramacion: lenguajes, frameworks, scripts (ej: Python, Vue.js)
                - basesDeDatos: motores, ERPs, sistemas de almacenamiento
                - metodologias: formas de trabajo y marcos (Scrum, Agile)
                - otros: sistemas operativos, herramientas, plataformas (Windows, Jira, Slack, Figma)

                **Reglas adicionales:**
                - Traducir con precisi√≥n t√©cnica, sin alterar nombres propios.
                - Incluir versiones si est√°n disponibles.

            5. En el campo "observaciones", inclu√≠ un resumen estructurado del an√°lisis previo si existe.
            6. Us√° la metadata para enriquecer el rol y otros campos relevantes.
            7. Toda la informaci√≥n debe estar en espa√±ol, incluso si originalmente estaba en ingl√©s. No debe haber texto sin traducir.
            8. Si hay un campo que no tiene sentido en el contexto, us√° "".
            9. No incluyas ning√∫n texto fuera del JSON. Tu respuesta debe ser SOLO el JSON parseable.    
            10. Las aptitudes son caracter√≠sticas personales, sociales o cognitivas que determinan c√≥mo una persona se desempe√±a en su entorno laboral y c√≥mo se relaciona con otros
                - Extraer de presentaci√≥n personal, descripciones de logros, funciones o cualidades.
                - Incluye solo habilidades blandas (resoluci√≥n de problemas, liderazgo, autonom√≠a, etc.)
            
            
            11. En cursos coloque el nombre del curso, el a√±o y la instituci√≥n. Un curso puede ser una certificaci√≥n, un diplomado, un curso de capacitaci√≥n, etc.
                - Incluir **TODOS** los cursos, certificaciones, diplomados, talleres.
                - Buscar en: "Cursos", "Capacitaciones", "Educaci√≥n adicional".
                - Por cada entrada:
                - nombreCurso, anio, institucionCurso (usar "No especificada" si no se puede deducir).
                - Traducir t√≠tulos al espa√±ol neutro. No traducir instituciones.
            12. FORMACI√ìN ACAD√âMICA (formacionAcademica)
                - Incluir toda la educaci√≥n formal.
                - Buscar en secciones como: "Educaci√≥n", "Formaci√≥n acad√©mica", "Estudios".
                - Por cada entrada:
                - institucion: nombre completo (si dice "UBA", deducir "Universidad de Buenos Aires"; si no es deducible, usar "No especificada").
                - titulo: nombre completo del estudio; incluir "(en curso)" o "(con honores)" si corresponde.
                - fechaInicio, fechaFin: a√±o o "" si no puede inferirse.
                - Traducir t√≠tulos al espa√±ol neutro, no el nombre de la instituci√≥n.
             13. EXPERIENCIA LABORAL (trayectoria)
                - Incluir todas las experiencias mencionadas.
                - Por cada entrada:
                - empresa, puesto, periodo
                - funciones: redactar en **tercera persona, con vi√±etas**
                - motivoEgreso: si est√°, incluirlo; si no, usar ""
                - Preservar el mayor nivel de detalle. No resumir. NO acotar la cantidad de experiencias. Mantener orden cronol√≥gico inverso 
             14. DETERMINACI√ìN DEL ROL (rol)
                    Priorizar en este orden:
                    1. Rol esperado o solicitado.
                    2. Rol actual o autodefinido.
                    3. Rol m√°s reciente.               
            15. REGLAS GENERALES
            - No inventar datos.
            - No dejar campos con null, guiones o N/A. Usar "".
            - Mantener texto en espa√±ol.
            - Preservar fechas, nombres, versiones y cifras.
            - No incluir texto fuera del JSON.
            - El archivo final debe ser 100% parseable como JSON.              
              
              
                `;

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            temperature: 0.7,
        });



         // ‚úÖ NUEVO BLOQUE para tokens
         const usage = completion.usage || {};
         const model = completion.model || "desconocido";
 
          // Definir precios por modelo (solo gpt-4o-mini)
          const PRECIOS = {
            "gpt-4o-mini": {
              input:  0.0006,  // USD por 1 000 tokens de entrada
              output: 0.0024   // USD por 1 000 tokens de salida
            }
          };
          
          // C√°lculo "exacto" (no redondeos)
          const precios      = PRECIOS["gpt-4o-mini"];
          const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
          const tokensOutput = usage.completion_tokens;   // p. ej. 1072
          
          const costoInput  = (tokensInput  / 1000) * precios.input;
          const costoOutput = (tokensOutput / 1000) * precios.output;
          const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;


         const tokenInfo = {
             modelo: model,
             tokens_prompt: usage.prompt_tokens || 0,
             tokens_respuesta: usage.completion_tokens || 0,
             tokens_total: usage.total_tokens || 0,
             costo_input: costoInput.toFixed(4),
             costo_output: costoOutput.toFixed(4),
             costo_total: costoTotal.toFixed(4),
             fecha: new Date(),
             usuario:  "desconocido",
             consulta: "Generar ficha OneSelect"
         };
         await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);
 
        const response = completion.choices[0].message.content;

        let parsedData;
       try {
           parsedData = JSON.parse(response.trim());
           parsedData.observaciones = resumenAnalisis;
           console.log('Datos procesados correctamente:', parsedData);
           
       } catch (error) {
           console.error('Error al parsear JSON:', error);
           // Intento de recuperaci√≥n: convertir el texto a formato JSON
           parsedData = convertTextToJSON(response);
       }
            
            console.log('Datos procesados:', parsedData);

        // Aplanar los datos personales para el template
        const templateData = {
            ...parsedData,
            nombre: parsedData.nombre,
            apellido: parsedData.apellido,
            profesion: parsedData.profesion,
            rol: parsedData.rol,
            edad: parsedData.edad,
            fechaNacimiento: parsedData.fechaNacimiento,
            zonaResidencia: parsedData.zonaResidencia,
            estadoCivil: parsedData.estadoCivil,
            composicionFamiliar: parsedData.composicionFamiliar,
            nacionalidad: parsedData.nacionalidad,
            movilidadPropia: parsedData.movilidadPropia,
            instituciones: parsedData.formacionAcademica.map(institucion => ({
                institucion: institucion.institucion,
                titulo: institucion.titulo,
                fechaInicio: institucion.fechaInicio,
                fechaFin: institucion.fechaFin
            })),
            cursos: parsedData.cursos.map(curso => ({
                nombreCurso: curso.nombreCurso,
                anioCurso: curso.anioCurso,
                institucionCurso: curso.institucionCurso
            })),
            aptitudes: parsedData.aptitudes,
            lenguajesProgramacion: parsedData.habilidades.lenguajesProgramacion,
            basesDeDatos: parsedData.habilidades.basesDeDatos,
            metodologias: parsedData.habilidades.metodologias,
            otros: parsedData.habilidades.otros,
            trayectoria: parsedData.trayectoria.map(trayectoria => ({
                periodo: trayectoria.periodo,
                empresa: trayectoria.empresa,
                puesto: trayectoria.puesto,
                funciones: trayectoria.funciones,
                motivoEgreso: trayectoria.motivoEgreso
            })),
            aniosExperiencia: parsedData.AniosExperiencia,
            areaExperiencia: parsedData.AreaExperiencia,
            empresaactual: parsedData.empresaactual,
            observaciones: resumenAnalisis,
            hobbies: parsedData.hobbies,
            compromisosProximos: parsedData.compromisosProximos,
            otrosProcesos: parsedData.otrosProcesos,
            carnetConducir: parsedData.carnetConducir,
            antecedentes: parsedData.antecedentes
        };



        // Cargar y renderizar el template con Docxtemplater
        const template = fs.readFileSync(templatePath, 'binary');
        const zip = new PizZip(template);

        const doc = new Docxtemplater(zip, {
            paragraphLoop: true,
            linebreaks: true
        });

        doc.render(templateData);

        const buf = doc.getZip().generate({
            type: 'nodebuffer',
            mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            compression: 'DEFLATE'
        });

        return buf;

    } catch (error) {
        console.error('Error en generateCurriculumFichaOneSelect:', error);
        throw error;
    }
};


export const generateCurriculumFicha = async (postulantInfo, archivos, analisisPostulante, templatePath) => {
    try {
        console.log('\nüîÑ Iniciando generaci√≥n de ficha curricular');
        
        // 1. Procesar los archivos CV para extraer el texto
        const processedDocs = await processCVFiles(archivos);
        let cvText = processedDocs.map(doc => doc.texto).join('\n\n');
        
        // 2. Aplicar postprocesamiento inteligente al texto del CV
        console.log('üîÑ Aplicando postprocesamiento inteligente al texto del CV...');
        cvText = await postProcessText(cvText);
        console.log('‚úÖ Postprocesamiento completado');
        console.log('üìù Muestra del texto procesado:', cvText.substring(0, 500));
        
        const cvVacio = !cvText || cvText.trim() === '' || cvText.includes('Error al procesar PDF');    
        console.log('cvVacio:', cvVacio);
    
        
// Procesar la foto si existe
 let imageModule = null;
 let imageData = null;
 

 const resumenAnalisis = analisisPostulante ? `
 AN√ÅLISIS DEL CANDIDATO:
 
 Presentaci√≥n del Postulante:
 ${postulantInfo.presentacionPostulante || 'No especificada'}
 
 
 Aptitud General para el Puesto:
 ${analisisPostulante.aptitudParaPuesto || 'No especificada'}
 
 Fortalezas Identificadas:
 ${analisisPostulante.fortalezas ? 
   analisisPostulante.fortalezas.map(f => `‚Ä¢ ${f}`).join('\n') : 
   'No especificadas'}
 
 √Åreas de Mejora:
 ${analisisPostulante.debilidades ? 
   analisisPostulante.debilidades.map(d => `‚Ä¢ ${d}`).join('\n') : 
   'No especificadas'}
 
 Evaluaci√≥n de Requisitos:
 ${analisisPostulante.justificacionRequisitos || 'No disponible'}
 ` : 'No hay an√°lisis previo disponible' + (postulantInfo.presentacionPostulante ? `\n\nPresentaci√≥n del Postulante:\n${postulantInfo.presentacionPostulante}` : '');

        // 2. Crear el prompt para OpenAI
        const prompt = `
        Este prompt tiene como objetivo generar una ficha curricular estructurada, completa y profesional del perfil de un/a postulante, basada en su CV original, pensada desde la mirada de una reclutadora para ser presentada a un cliente final.
        El resultado debe:
        - Reflejar fielmente las competencias, experiencias y formaci√≥n de la persona.
        - Excluir **datos personales sensibles o de contacto** (tel√©fono, email, direcci√≥n, documento, etc.).
        - Presentar la informaci√≥n en un formato claro, estandarizado y sin adornos innecesarios.
        - Estar redactado en **tercera persona**, con lenguaje profesional y objetivo.
        - Ser completamente **parseable como JSON**, manteniendo la estructura exacta requerida.
        


          INFORMACI√ìN DEL POSTULANTE:
        ${JSON.stringify(postulantInfo, null, 2)}

        CONTENIDO DEL CV ORIGINAL:
        ${cvText}

        ${analisisPostulante ? `
            AN√ÅLISIS PREVIO DEL POSTULANTE:
            ${JSON.stringify(analisisPostulante, null, 2)}
            ` : ''}
    

        TRADUCCI√ìN:
            Antes de estructurar la informaci√≥n, traduc√≠ TODO el contenido del CV y cualquier parte del an√°lisis que est√© en ingl√©s al ESPA√ëOL NEUTRO. No debe quedar ninguna frase en ingl√©s. No mantengas t√≠tulos de cursos, descripciones de trabajos ni herramientas sin traducir. Us√° traducciones naturales y profesionales, no traducciones literales ni palabra por palabra.

            Luego de traducirlo internamente, complet√° el JSON respetando el resto de las instrucciones.

            ‚ö†Ô∏è Si el resultado incluye texto en ingl√©s ser√° considerado incorrecto. No debe haber frases, descripciones ni t√≠tulos sin traducir. Toda la informaci√≥n debe estar redactada en un espa√±ol correcto, sin errores gramaticales ni de traducci√≥n literal.

            INSTRUCCIONES PARA LA ESTRUCTURA:
            IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.   
            Genera un JSON con EXACTAMENTE esta estructura:
        {
            "datosPersonales": {
                "nombre": "string",
                "apellido": "string",
                "rol": "string",
                "edad": "string",
                "zonaResidencia": "string",
                "estadoCivil": "string",
                "fechaNacimiento": "string",
                "radicacion": "string",
                "grupoFamiliar": "string",
                "nacionalidad": "string"
            },
            "educacion": [{
                "institucion": "string",
                "titulo": "string",
                "fechaInicio": "string",
                "fechaFin": "string"
            }],
            "cursosCertificaciones": [{
                "nombreCurso": "string",
                "anio": "string",
                "institucion": "string"
            }],
            "habilidades": {
                "lenguajesProgramacion": ["string"],
                "basesDeDatos": ["string"],
                "metodologias": ["string"],
                "otros": ["string"]
            },
            "trayectoriaProfesional": [{
                "empresa": "string",
                "puesto": "string",
                "fechaInicio": "string",
                "fechaFin": "string",
                "descripcion": "string"
            }],
            "aptitudes": ["string"],
            "AniosExperiencia": "string",
            "AreaExperiencia": "string",
            "observaciones": "string (Incluir aqu√≠ un resumen del an√°lisis previo si existe)",
            "idiomas": [{
                "idioma": "string",
                "nivel": "string"
            }]
        }
  
           
       REGLAS ESTRICTAS PARA LA ESTRUCTURACI√ìN:

   1. FORMACI√ìN ACAD√âMICA (campo: "educacion"):
        - OBLIGATORIO: Incluir toda la educaci√≥n formal del postulante.
        - Buscar en secciones como "Educaci√≥n", "Formaci√≥n acad√©mica", "Estudios", o cualquier parte del texto donde se describa formaci√≥n.
        - Cada entrada debe tener:
        ‚Ä¢ institucion: nombre completo de la instituci√≥n (si est√° abreviado como "UTN", "UBA", inferir su forma completa; si no se puede deducir, usar "No especificada")
        ‚Ä¢ titulo: nombre completo del estudio o carrera
        ‚Ä¢ fechaInicio: a√±o de inicio del estudio (usar "" si no est√° claro y no se puede inferir)
        ‚Ä¢ fechaFin: a√±o de finalizaci√≥n (usar "" si no est√° claro y no se puede inferir)
        - Si hay una menci√≥n como "en curso", incluirlo entre par√©ntesis en el t√≠tulo.
        - Si hay descripciones adicionales relevantes (como especializaci√≥n, honores, tesis), incluirlas dentro del campo "titulo" entre par√©ntesis.
        - No omitir ning√∫n t√≠tulo aunque parezca repetido, incompleto o poco claro.
        - Traducir al espa√±ol neutro los t√≠tulos si est√°n en ingl√©s.
        - NO traducir el nombre de la instituci√≥n.
        - Mantener fechas lo m√°s exactas posibles. Si no hay fechas expl√≠citas, se puede inferir por contexto si es razonable hacerlo.

    2. CURSOS Y CERTIFICACIONES (campo: "cursosCertificaciones"):
        - OBLIGATORIO: Incluir TODOS los cursos, certificaciones, talleres, diplomados o capacitaciones mencionadas por el postulante.
        - Buscar en secciones como: "Educaci√≥n complementaria", "Certificaciones", "Cursos", "Formaci√≥n adicional", o descripciones donde se detallen estudios no universitarios.
        - Cada entrada debe tener:
        ‚Ä¢ nombreCurso: nombre completo del curso o certificaci√≥n
        ‚Ä¢ anio: a√±o en que fue realizado (usar "" si no est√° claro)
        ‚Ä¢ institucion: nombre de la instituci√≥n que lo dict√≥ (si no est√° expl√≠cita y no puede deducirse por el contexto, usar "No especificada")
        - Traducir al espa√±ol neutro los t√≠tulos de los cursos si est√°n en ingl√©s.
        - No traducir el nombre de la instituci√≥n.
        - No omitir ning√∫n curso aunque parezca redundante, incompleto o informal.
        - Si la instituci√≥n aparece como sigla o forma abreviada (ej: "MIT", "UBA"), dejarla tal cual si es reconocida o completarla si se deduce por el contexto.


     3. EXPERIENCIA LABORAL (campo: "trayectoria"):

        - OBLIGATORIO: Incluir TODAS las experiencias laborales mencionadas, sin importar la duraci√≥n, antig√ºedad o repetici√≥n.
        - Buscar en secciones como "Experiencia", "Trayectoria", "Historial laboral", "Antecedentes", o similares.

        Cada entrada debe incluir:
        ‚Ä¢ empresa: nombre exacto de la empresa u organizaci√≥n
        ‚Ä¢ puesto: t√≠tulo del cargo desempe√±ado
        ‚Ä¢ fechaInicio: a√±o y mes de inicio, si est√°n disponibles (formato: "YYYY-MM")
        ‚Ä¢ fechaFin: a√±o y mes de finalizaci√≥n o "Actualidad" si contin√∫a vigente
        ‚Ä¢ descripcion: funciones y logros principales, redactadas en tercera persona y expresadas en vi√±etas o puntos claros
        ‚Ä¢ motivoEgreso: si est√° mencionado, incluirlo; si no est√°, dejar el campo como ""

        Reglas adicionales:
        - NO omitir ninguna experiencia mencionada, incluso si parece redundante o breve.
        - Mantener el mayor nivel de detalle posible: incluir tareas, herramientas utilizadas, impacto o m√©tricas si est√°n disponibles.
        - No resumir las responsabilidades; describirlas de forma completa y profesional.
        - Si hay inconsistencias en las fechas, usar la m√°s precisa o justificada por contexto.
        - Preservar el orden cronol√≥gico en la estructura del JSON (de m√°s reciente a m√°s antigua, si se puede deducir).


        4. HABILIDADES T√âCNICAS (campo: "habilidades"):

                a) Fuentes de informaci√≥n:
                - Buscar habilidades en:
                ‚Ä¢ Presentaci√≥n del postulante
                ‚Ä¢ Descripciones de experiencias laborales
                ‚Ä¢ Formaci√≥n acad√©mica
                ‚Ä¢ Cursos y certificaciones
                ‚Ä¢ Secciones expl√≠citas de "skills" o "herramientas"
                ‚Ä¢ Cualquier menci√≥n t√©cnica dispersa

                b) Clasificaci√≥n en categor√≠as:
                - lenguajesProgramacion: incluir lenguajes de programaci√≥n, frameworks, librer√≠as, scripts (ej: JavaScript, Python, Vue.js)
                - basesDeDatos: motores de bases de datos, sistemas de almacenamiento, sistemas ERP o gesti√≥n empresarial (ej: MySQL, SQL server, SAP, Oracle)
                - metodologias: metodolog√≠as de trabajo y marcos de gesti√≥n (ej: Scrum, Agile, Design Thinking)
                - otros: herramientas, plataformas, software, sistemas operativos (Windows, Linux), tecnolog√≠as de monitoreo, colaboraci√≥n o dise√±o (ej: Zoom, Slack, Excel, Jira, Trello, Notion, Figma, Hotjar)

                c) Reglas estrictas:
                - Incluir TODA tecnolog√≠a, herramienta o sistema mencionado, aunque aparezca una sola vez o de forma indirecta en alguna parte del input.
                - No omitir tecnolog√≠as que est√©n dentro de las funciones laborales, descripci√≥n personal o certificaciones.
                - Traducir al espa√±ol neutro manteniendo precisi√≥n t√©cnica (ej: "Google Analytics" ‚Üí "Google Analytics", no traducir nombres propios).
                - Incluir versiones si est√°n especificadas (ej: "React 18").
                - Incluir herramientas mencionadas solo una vez, como Zoom, Slack, Excel, Trello, Jira, Miro, etc.
                - Incluir sistemas operativos como Windows o Linux si se mencionan
                - No dejar ninguna categor√≠a vac√≠a si hay elementos para incluir.

                d) Inferencias permitidas:
                - Si se menciona un rol t√©cnico (ej: "QA Tester") y no se detallan herramientas, se pueden inferir herramientas t√≠picas asociadas solo si hay contexto suficiente.

            

        5. APTITUDES (aptitudes):Las aptitudes son caracter√≠sticas personales, sociales o cognitivas que determinan c√≥mo una persona se desempe√±a en su entorno laboral y c√≥mo se relaciona con otros
           - Extraer de la presentaci√≥n personal
           - Incluir habilidades blandas mencionadas
           - Considerar logros y responsabilidades
           - Incluir caracter√≠sticas personales destacadas
           - Incluye solo **habilidades blandas** (resoluci√≥n de problemas, liderazgo, autonom√≠a, etc.)
           - Son caracter√≠sticas personales, sociales o cognitivas que determinan el desempe√±o laboral

        6. DATOS PERSONALES:
           - Mantener nombres exactos
           - Incluir datos de ubicaci√≥n si est√°n disponibles
           - Incluir fecha de nacimiento si est√° disponible y obtener la edad
           - Incluir estado civil si est√° disponible
           - Incluir grupo familiar si est√° disponible
           - Incluir radicaci√≥n si est√° disponible
           - Incluir nacionalidad si est√° disponible
           - **Excluir completamente**: tel√©fono, email, direcci√≥n, documento, redes sociales, CUIT/CUIL.

          

        7. OBSERVACIONES:
           - Incluir resumen del an√°lisis previo si existe
           - Mantener informaci√≥n relevante no categorizada
           - Preservar detalles importantes

        8. DETERMINACI√ìN DEL ROL:
           Prioridad para determinar el campo "rol":
           a) Usar el rol esperado/solicitado para la posici√≥n si est√° disponible
           b) Si no hay rol esperado/solicitado, usar el rol actual o autodefinido
           c) Si ninguno de los anteriores est√° disponible, usar el rol m√°s reciente

        9. REGLAS GENERALES:
           - NO omitir informaci√≥n disponible
           - NO inventar datos
           - Mantener el texto en espa√±ol
           - Preservar fechas y n√∫meros exactos
           - No inventar informaci√≥n faltante
           - Para cualquier campo sin informaci√≥n disponible o cuyo valor expl√≠cito sea "No especificada", usar el string vac√≠o "".
                - No utilizar "null", "undefined", guiones, espacios en blanco ni expresiones como "N/A" o "No aplica".
                - Esta regla aplica a todos los campos, incluyendo datos personales, formaci√≥n, certificaciones, fechas, idiomas, tecnolog√≠as, etc.
           - Usar [] para arrays vac√≠os
           - No incluir texto fuera del JSON
           - Priorizar la informaci√≥n del CV sobre la metadata
           - Si hay conflicto, usar la informaci√≥n m√°s detallada

        IMPORTANTE: 
        - Revisar TODAS las secciones del CV. El CONTENIDO DEL CV ORIGINAL contiene informaci√≥n valiosa para completar los campos: utilizala a fondo.
        - No omitir informaci√≥n por parecer redundante
        - Mantener la estructura exacta del JSON
        - Preservar TODA la informaci√≥n original
        - No resumir ni truncar descripciones
        
            `;
         
       console.log('Prompt GENERADO PARA FICHA CURRICULAR:', prompt);
       // Llamada a OpenAI
       const completion = await openai.chat.completions.create({
           model: "gpt-4o-mini",
           messages: [{ role: "user", content: prompt }],
           temperature: 0.7,
       });


        // ‚úÖ NUEVO BLOQUE para tokens
        const usage = completion.usage || {};
        const model = completion.model || "desconocido";

        
         // Definir precios por modelo (solo gpt-4o-mini)
         const PRECIOS = {
            "gpt-4o-mini": {
              input:  0.0006,  // USD por 1 000 tokens de entrada
              output: 0.0024   // USD por 1 000 tokens de salida
            }
          };
          
          // C√°lculo "exacto" (no redondeos)
          const precios      = PRECIOS["gpt-4o-mini"];
          const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
          const tokensOutput = usage.completion_tokens;   // p. ej. 1072
          
          const costoInput  = (tokensInput  / 1000) * precios.input;
          const costoOutput = (tokensOutput / 1000) * precios.output;
          const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;

        const tokenInfo = {
            modelo: model,
            tokens_prompt: usage.prompt_tokens || 0,
            tokens_respuesta: usage.completion_tokens || 0,
            tokens_total: usage.total_tokens || 0,
            costo_input: costoInput.toFixed(4),
            costo_output: costoOutput.toFixed(4),
            costo_total: costoTotal.toFixed(4),
            fecha: new Date(),
            //usuario: req?.headers?.['x-forwarded-for']?.split(',')[0] || req?.connection?.remoteAddress || 'desconocido',
            usuario:  "desconocido",
            consulta: "Generar Ficha de Soft"
        };
        await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);

       // Procesar la respuesta
       const response = completion.choices[0].message.content;
       console.log('Respuesta de OpenAI:', response);
        
       let parsedData;
       try {
           // Intentar parsear el JSON
           parsedData = JSON.parse(response.trim());
           
           // Validar estructura b√°sica
           if (!parsedData.datosPersonales) {
               throw new Error('Formato de respuesta inv√°lido: falta secci√≥n datosPersonales');
           }
           // Y despu√©s de parsear la respuesta de OpenAI, asegurarnos que tenga el campo observaciones
            if (parsedData) {
                // Forzar el campo observaciones con el resumen del an√°lisis
                parsedData.observaciones = resumenAnalisis;
            }

           console.log('Datos procesados correctamente:', parsedData);
           
       } catch (error) {
           console.error('Error al parsear JSON:', error);
           // Intento de recuperaci√≥n: convertir el texto a formato JSON
           parsedData = convertTextToJSON(response);
       }
            

       if (cvVacio) {
        parsedData.datosPersonales.edad = "No se pudo extraer informaci√≥n del CV (texto de entrada vac√≠o/inv√°lido)";
           }
           
            console.log('Datos procesados:', parsedData);
            
     
        // Aplanar los datos personales para el template
        const templateData = {
            ...parsedData,
            nombre: parsedData.datosPersonales.nombre,
            apellido: parsedData.datosPersonales.apellido,
            rol: parsedData.datosPersonales.rol,
            edad: cvVacio ? "¬°¬°¬° Atenci√≥n.!!! El proceso no pudo extraer informaci√≥n del CV adjunto " : parsedData.datosPersonales.edad,
            aptitudes: parsedData.aptitudes,
            aniosExperiencia: parsedData.AniosExperiencia,
            areaExperiencia: parsedData.AreaExperiencia,
            zonaResidencia: parsedData.datosPersonales.zonaResidencia,
            estadoCivil: parsedData.datosPersonales.estadoCivil,
            fechaNacimiento: parsedData.datosPersonales.fechaNacimiento,
            radicacion: parsedData.datosPersonales.radicacion,
            grupoFamiliar: parsedData.datosPersonales.grupoFamiliar,
            nacionalidad: parsedData.datosPersonales.nacionalidad,
            lenguajesProgramacion: parsedData.habilidades.lenguajesProgramacion,
            basesDeDatos: parsedData.habilidades.basesDeDatos,
            metodologias: parsedData.habilidades.metodologias,
            otros: parsedData.habilidades.otros,
            observaciones: resumenAnalisis,
            ///...(imageData ? { foto: imageData } : {})  // Solo incluir foto si existe imageData
        };

   

        // Crear el documento
        const template = fs.readFileSync(templatePath, 'binary');
        const zip = new PizZip(template);
        /*const doc = new Docxtemplater(zip, {
            paragraphLoop: true,
            linebreaks: true
        });*/

        // Crear el documento con o sin el m√≥dulo de imagen
        const doc = new Docxtemplater(zip, {
            paragraphLoop: true,
            linebreaks: true
            // Solo incluir el m√≥dulo de im√°genes si hay foto
           // modules: imageData ? [imageModule] : []
        });
               
        // Usar los datos aplanados
        doc.render(templateData);
        
        // 7. Generar el archivo final
          // Generar el archivo DOCX directamente
          const buf = doc.getZip().generate({
            type: 'nodebuffer',
            mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            compression: 'DEFLATE'
        });

        
        return buf;

    } catch (error) {
        console.error('Error en generateCurriculumFicha:', error);
        console.error('Stack:', error.stack);
        throw error;
    }
};


function convertTextToJSON(text) {
    const lines = text.split('\n');
    const result = {
        datosPersonales: {},
        formacionAcademica: [],
        experienciaProfesional: [],
        habilidades: [],
        idiomas: [],
        referencias: [],
        otrosDatos: {}
    };

    let currentSection = null;
    
    for (const line of lines) {
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('DATOS PERSONALES:')) {
            currentSection = 'datosPersonales';
        } else if (trimmedLine.startsWith('FORMACI√ìN ACAD√âMICA:')) {
            currentSection = 'formacionAcademica';
        } // ... etc para otras secciones

        if (trimmedLine.startsWith('- ')) {
            const [key, value] = trimmedLine.substring(2).split(': ');
            if (currentSection === 'datosPersonales') {
                result.datosPersonales[key.toLowerCase()] = value || null;
            }
            // ... procesar otras secciones
        }
    }

    return result;
}
// Funci√≥n para analizar el template
async function analyzeTemplate(templatePath) {
    try {
        console.log('\nüîç Analizando template en:', templatePath);
        
        // 1. Leer el archivo
        const content = fs.readFileSync(templatePath, 'binary');
        const zip = new PizZip(content);
        const doc = new Docxtemplater(zip);
        
        // 2. Obtener el contenido en texto plano
        const text = doc.getFullText();
        
        console.log('\nüìÑ Contenido del template:');
        console.log('----------------------------------------');
        console.log(text);
        console.log('----------------------------------------');
        
        // 3. Buscar marcadores/variables en el template
        const regex = /\{([^}]+)\}/g;
        const markers = text.match(regex) || [];
        
        console.log('\nüè∑Ô∏è Marcadores encontrados:');
        console.log('----------------------------------------');
        markers.forEach(marker => console.log(marker));
        console.log('----------------------------------------');
        
        return {
            text,
            markers
        };
    } catch (error) {
        console.error('Error analizando template:', error);
        throw error;
    }
}

// Exportar la funci√≥n para poder usarla
export const analyzeTemplateCV = async (templatePath) => {
    return await analyzeTemplate(templatePath);
};
export const analizarPerfil = async (descripcion) => {
    try {
        console.log('\nüîç ANALIZANDO PERFIL:');
        console.log('----------------------------------------');
        console.log('Descripci√≥n:', descripcion);
        console.log('----------------------------------------\n');

        const prompt = `
        Eres un experto en an√°lisis de descripciones de puestos laborales. 
        Vas a procesar una descripci√≥n textual y devolver un objeto JSON con toda la informaci√≥n t√©cnica y contextual 
        del puesto.
        El objetivo es extraer toda la informaci√≥n relevante del puesto, 
        manteniendo la riqueza t√©cnica, la precisi√≥n sem√°ntica y la estructuraci√≥n clara para uso posterior. 
        El resultado ser√° usado para evaluar candidatos en forma proactiva.


‚ö†Ô∏è REGLAS GENERALES (derivadas del prompt proactivo):
- No inventes ni infieras datos que no est√©n expl√≠citamente presentes.
- Si no pod√©s determinar un campo con certeza, devolv√© "No especificado".
- Toda informaci√≥n debe surgir del texto de la descripci√≥n.
- Toda la informaci√≥n t√©cnica debe estar representada en al menos uno de los campos del JSON.
- Evit√° duplicaciones, errores de formato, o agrupaciones ambiguas.
- Si una secci√≥n es reconocible aunque con otra redacci√≥n (ej: beneficios, conocimientos deseables), debe ser procesada.

üì¶ FORMATO DE RESPUESTA:
Devuelve √öNICAMENTE el objeto JSON. No incluyas texto adicional, ni \`\`\`, ni etiquetas.

üìå CAMPOS Y REGLAS DE EXTRACCI√ìN:

1. **titulo**:
   - Copiar exactamente el t√≠tulo tal como aparece en la descripci√≥n.

2. **area**:
  - Inferir SOLO si es obvio por el contenido ("Tecnolog√≠a", "Finanzas", etc.).
   - Si contiene t√©rminos como desarrollador, backend, software, QA, etc., usar "Tecnolog√≠a".
   - Si no se puede determinar, usar: "No especificado".

3. **descripcion**:
      - Redactar una **descripci√≥n profesional y completa** del puesto.
   - Debe incluir:
     - El rol general
     - Modalidad de trabajo y residencia si est√°n presentes
     - Habilidades t√©cnicas con contexto: versiones, experiencia deseada, herramientas
     - Tecnolog√≠as deseables (si se indican)
     - Habilidades blandas mencionadas
   - NO omitir nada del contenido t√©cnico del input. NI la informaci√≥n relevante del puesto. 
    -Cuanto mas detallado mejor.
   - Ejemplo: 
     "Se busca un Desarrollador Backend NET con al menos 5 a√±os de experiencia en desarrollo con .Net Core (versi√≥n 8+), construcci√≥n de APIs, pruebas automatizadas (unit testing), uso de GIT y trabajo en entornos SCRUM. Se espera experiencia con microservicios, bases de datos SQL y NoSQL (PostgreSQL, MongoDB), herramientas de monitoreo como Datadog y Prometheus, y orquestaci√≥n con Kubernetes. El puesto requiere habilidades blandas como trabajo en equipo, pensamiento anal√≠tico, y orientaci√≥n a resultados. Modalidad 100% remota. Residencia en Argentina."


4. requisitos:
   - Este campo es **CR√çTICO**.
    - Este campo debe ser una lista **plana y limpia** de tecnolog√≠as, herramientas, lenguajes y metodolog√≠as mencionadas.
    - Separar cada tecnolog√≠a como un √≠tem √∫nico.
    - Si se mencionan alternativas, listarlas **por separado** (ej: "ElasticSearch o MongoDB" ‚Üí "ElasticSearch, MongoDB").
    - No usar barras ("/"), guiones ni "o".
    - Si una herramienta tiene versi√≥n, **dejar solo la tecnolog√≠a**:
        - ".Net core versi√≥n 8+" ‚Üí ".Net" y "net"
        - Agrupar solo si es expl√≠cito en el texto, **pero en √≠tems separados**.
    - Ejemplo de salida correcta:
        - ".Net, APIs, Unit testing, GIT, SCRUM, Microservicios, PostgresSql, SQL, NoSQL, ElasticSearch, MongoDB, RabbitMQ, Kafka, Datadog, Kubernetes, Prometheus, Kibana, Opensearch, Golang"


5. **descripcionTrabajo**:
  - Extraer todas las tareas o responsabilidades si se mencionan.
   - Separar por coma o en bloque textual.
    - Extraer las tareas si se mencionan.
   - Si est√°n en listas o secciones de "desaf√≠os", procesarlas en bloque textual.
   - Si no hay nada claro, devolver: "No especificado".


6. **ubicacion** (objeto con pa√≠s, provincia y ciudad):
   Aplicar esta l√≥gica exacta:

   - **Normalizaci√≥n b√°sica**:
     - "Capital Federal" ‚Üí ciudad: "Ciudad Aut√≥noma de Buenos Aires", provincia: "Buenos Aires"
     - "Santiago de Chile" ‚Üí ciudad: "Santiago"
     - Si se menciona una ciudad argentina conocida, inferir su provincia y pa√≠s (Argentina).

   - **Regiones nacionales de Argentina**:
     - Ej: "Mesopotamia"
       {
         "pais": "Argentina",
         "provincia": "Regi√≥n: Mesopotamia",
         "ciudad": "No especificado"
       }

   - **Regiones internacionales**:
     - Ej: "LATAM"
       {
         "pais": "Regi√≥n: LATAM",
         "provincia": "No especificado",
         "ciudad": "No especificado"
       }

   - **M√∫ltiples ubicaciones**:
     - Si se listan varias ubicaciones, agregarlas separadas por coma en cada nivel.
       Ejemplo:
       {
         "pais": "Argentina, Chile, Uruguay",
         "provincia": "Buenos Aires, C√≥rdoba, Santa Fe",
         "ciudad": "Buenos Aires, La Plata, Mar del Plata"
       }

   - **Orden de prioridad de detecci√≥n**:
     1. Regi√≥n internacional (ej: LATAM, MERCOSUR)
     2. Regi√≥n nacional (ej: Patagonia)
     3. M√∫ltiples ubicaciones
     4. Normalizaci√≥n b√°sica

7. **modalidadTrabajo, tipoTrabajo**:
- Extraer expl√≠citamente si se menciona con claridad. Ejemplos v√°lidos:
     - "100% Remoto" ‚Üí "Remoto"
     - "Presencial en oficinas de Buenos Aires" ‚Üí "Presencial"
     - "H√≠brido, 3 veces por semana" ‚Üí "H√≠brido"
   - Tambi√©n aceptar variantes comunes y expresiones t√≠picas como:
     - "trabajo remoto", "full remote", "home office" ‚Üí "Remoto"
     - "trabajo presencial", "en oficina", "on-site" ‚Üí "Presencial"
     - "h√≠brido", "semi-presencial", "parte presencial" ‚Üí "H√≠brido"
   - Si se menciona m√°s de una (ej: "remoto al principio, h√≠brido luego"), elegir la **modalidad principal** o devolver: "Mixto"
   - Si **no se menciona ninguna modalidad reconocible**, devolver: "No especificado"

8. **tipoTrabajo**
   - Ej: "Full time", "Part time", "No especificado"   

9. Campos adicionales (beneficios, condiciones, nivel educativo, idioma, g√©nero, jerarqu√≠a, etc.):
   - NO se deben inventar datos si no est√°n presentes.
   - Sin embargo, s√≠ se puede completar el campo si:
     - Hay una menci√≥n directa (aunque breve) en el texto.
     - Hay palabras clave o frases t√≠picas reconocibles (ej: "ingl√©s intermedio", "t√≠tulo universitario", "experiencia liderando equipos", "acceso a beneficios corporativos").
   - Usar expresiones generales si est√°n en el input (ej: "beneficios corporativos", "flexibilidad horaria").
   - Ejemplos aceptables:
     - "idioma": "Ingl√©s intermedio"
     - "nivelMinimoEducacion": "T√≠tulo universitario"
     - "jerarquia": "Senior"
     - "beneficios": "Home office, flexibilidad horaria, prepaga"
   - Si no hay absolutamente ninguna menci√≥n, devolver "No especificado"

   10. CAMPOS COMPLEMENTARIOS ‚Äî Definiciones detalladas por campo:

- **descripcionEmpresa**:
  - Extraer cualquier referencia a la empresa contratante o su sector (ej: "empresa del rubro financiero", "startup tecnol√≥gica", "empresa multinacional").
  - Si no se especifica absolutamente nada sobre la empresa, devolver: "No especificado".

- **areaTrabajo**:
  - Si el puesto menciona expl√≠citamente un √°rea organizacional (ej: "trabajar√° con el √°rea de Producto, Marketing, Finanzas, etc."), devolver ese valor.
  - Si no se menciona ninguna, devolver: "No especificado".

- **descripcionTrabajo**:
  - Extraer TODAS las responsabilidades, desaf√≠os o tareas del puesto.
  - Si est√°n enumeradas en vi√±etas, procesarlas en bloque.
  - Si no hay nada claro, devolver: "No especificado".

- **estadoNivelEducacion**:
  - Si se exige un t√≠tulo finalizado o en curso, devolver "Completo" o "En curso".
  - Si no se menciona el estado del nivel educativo, devolver: "No especificado".

- **nivelMinimoEducacion**:
  - Extraer el nivel m√≠nimo requerido, como: "Secundario completo", "T√≠tulo universitario", "Carrera af√≠n", "Maestr√≠a".
  - Si no se menciona formaci√≥n acad√©mica, devolver: "No especificado".

- **requisitoSecundarioCompleto**:
  - Si se exige expl√≠citamente tener secundaria terminada, devolver: "S√≠".
  - Si no se menciona nada al respecto, devolver: "No especificado".

- **requisitoIdioma**:
  - Extraer el nivel requerido si se menciona (ej: "Ingl√©s intermedio", "Portugu√©s avanzado").
  - Si no se menciona ning√∫n nivel, devolver: "No especificado".

- **idioma**:
  - Indicar el idioma espec√≠fico solicitado si est√° mencionado (ej: "Ingl√©s", "Portugu√©s").
  - Si no se menciona ninguno, devolver: "No especificado".

- **requisitoReubicacionLaboral**:
  - Si se menciona que el candidato debe mudarse o estar dispuesto a reubicarse, devolver: "S√≠".
  - Si se aclara que no es necesario o no hay menci√≥n, devolver: "No especificado".

- **requisitoDisponibilidadHoraria**:
  - Si el puesto requiere horarios especiales (guardias, turnos, disponibilidad nocturna o fines de semana), extraerlo como texto.
  - Si no se menciona, devolver: "No especificado".

- **requisitoGenero**:
  - Si el anuncio solicita un g√©nero espec√≠fico (ej: "preferentemente mujer"), devolver ese valor.
  - Si no se menciona nada, devolver: "No especificado".

- **jerarquia**:
  - Si el t√≠tulo o el texto menciona "Junior", "Semi Senior", "Senior", "L√≠der", "Manager", extraer ese valor.
  - Si se habla de a√±os de experiencia (ej: "m√≠nimo 5 a√±os"), se puede deducir:
    - ‚â•5 a√±os ‚Üí "Senior"
    - ‚â•2 a√±os ‚Üí "Semi Senior"
    - <2 a√±os ‚Üí "Junior"
  - Si no hay pistas suficientes, devolver: "No especificado".

- **genero**:
  - Si el texto menciona expl√≠citamente un g√©nero como requisito o preferencia, devolver: "Masculino", "Femenino", "Indistinto", etc.
  - Si no hay menci√≥n, devolver: "No especificado".

- **beneficios**:
  - Extraer cualquier beneficio ofrecido (ej: "prepaga", "home office", "d√≠as libres", "capacitaciones", "bonos", "stock options", etc.).
  - Si se menciona "trabajo remoto" como beneficio, incluirlo aqu√≠ tambi√©n.
  - Si no hay nada, devolver: "No especificado".

- **condiciones**:
  - Extraer condiciones contractuales, salariales o de carga horaria si se mencionan (ej: "contrato a plazo fijo", "sueldo competitivo", "jornada de 9 a 18hs").
  - Si no se menciona nada, devolver: "No especificado".

üìå ESTRUCTURA DEL JSON:

{
  "titulo": "string",
  "area": "string",
  "descripcion": "string",
  "requisitos": "string",
  "modalidadTrabajo": "string",
  "tipoTrabajo": "string",
  "tipoDeContratacion": "No especificado",
  "modalidadDeContratacion": "No especificado",
  "ubicacion": {
    "pais": "string",
    "provincia": "string",
    "ciudad": "string"
  },
  "descripcionEmpresa": "No especificado",
  "areaTrabajo": "No especificado",
  "descripcionTrabajo": "string o 'No especificado'",
  "estadoNivelEducacion": "No especificado",
  "nivelMinimoEducacion": "No especificado",
  "requisitoSecundarioCompleto": "No especificado",
  "requisitoIdioma": "No especificado",
  "idioma": "No especificado",
  "requisitoReubicacionLaboral": "No especificado",
  "requisitoDisponibilidadHoraria": "No especificado",
  "requisitoGenero": "No especificado",
  "jerarquia": "No especificado",
  "genero": "No especificado",
  "beneficios": "No especificado",
  "condiciones": "No especificado"
}

DESCRIPCI√ìN DEL PUESTO:
${descripcion}
        `

        const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [{ 
                role: "user", 
                content: prompt 
            }],
            temperature: 0.3,
            max_tokens: 2000
        });

         // ‚úÖ NUEVO BLOQUE para tokens
         const usage = completion.usage || {};
         const model = completion.model || "desconocido";
 
         // Definir precios por modelo
          // Definir precios por modelo (solo gpt-4o-mini)
          const PRECIOS = {
            "gpt-4o": {
              input:  0.005,  // USD por 1 000 tokens de entrada
              output: 0.015   // USD por 1 000 tokens de salida
            }
          };
          
          // C√°lculo "exacto" (no redondeos)
          const precios      = PRECIOS["gpt-4o"];
          const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
          const tokensOutput = usage.completion_tokens;   // p. ej. 1072
          
          const costoInput  = (tokensInput  / 1000) * precios.input;
          const costoOutput = (tokensOutput / 1000) * precios.output;
          const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;
 
         const tokenInfo = {
             modelo: model,
             tokens_prompt: usage.prompt_tokens || 0,
             tokens_respuesta: usage.completion_tokens || 0,
             tokens_total: usage.total_tokens || 0,
             costo_input: costoInput.toFixed(4),
             costo_output: costoOutput.toFixed(4),
             costo_total: costoTotal.toFixed(4),
             fecha: new Date(),
             usuario:  "desconocido",
             //usuario: req?.headers?.['x-forwarded-for']?.split(',')[0] || req?.connection?.remoteAddress || 'desconocido',
             consulta: "Analizar Perfil de Busqueda Proactiva"
         };
         console.log("tokenInfo");
         await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);
 
        const response = completion.choices[0].message.content;
        
        console.log('\nüì• RESPUESTA DE OPENAI:');
        console.log('----------------------------------------');
        console.log(response);
        console.log('----------------------------------------\n');

        // Intentar parsear la respuesta
        try {
            const parsedResponse = JSON.parse(response);
            return parsedResponse;
        } catch (error) {
            console.error('Error parseando respuesta de OpenAI:', error);
            return {
                categorias: {},
                requisitos_principales: ["Error al procesar los requisitos"],
                a√±os_experiencia: "No especificado",
                modalidad: "No especificado",
                ubicacion: "No especificado"
            };
        }

    } catch (error) {
        console.error('\n‚ùå ERROR EN ANALIZAR PERFIL:');
        console.error('----------------------------------------');
        console.error('Error completo:', error);
        console.error('----------------------------------------\n');

        return {
            error: `Error t√©cnico: ${error.message}. Por favor, intente m√°s tarde.`,
            categorias: {},
            requisitos_principales: [],
            a√±os_experiencia: "Error",
            modalidad: "Error",
            ubicacion: "Error"
        };
    }
};

export const generateInterview = async (jobDescription) => {
    try {
        // Primero, loguear los datos recibidos
        console.log('\n\nüîç DATOS RECIBIDOS EN GENERATE INTERVIEW:');
        console.log('----------------------------------------');
        console.log('Job Description:', jobDescription);
        console.log('----------------------------------------\n');

        // Simplificar y limpiar los datos del trabajo
        const jobData = {
            titulo: jobDescription.titulo || '',
            area: jobDescription.area || '',
            descripcion: jobDescription.descripcion || '',
            requisitos: jobDescription.requisitos || '',
            modalidad: jobDescription.modalidadTrabajo || '',
            tipo: jobDescription.tipoTrabajo || ''
        };

        // Loguear datos procesados
        console.log('\nüìù DATOS PROCESADOS:');
        console.log('----------------------------------------');
        console.log('Job Data:', JSON.stringify(jobData, null, 2));
        console.log('----------------------------------------\n');

        const prompt = `
Eres un experto reclutador de recursos humanos. Necesito que generes una entrevista completa para el siguiente puesto:

PUESTO DE TRABAJO:
- T√≠tulo: ${jobData.titulo}
- √Årea: ${jobData.area}
- Descripci√≥n: ${jobData.descripcion}
- Requisitos: ${jobData.requisitos}
- Modalidad: ${jobData.modalidad}
- Tipo: ${jobData.tipo}

IMPORTANTE: Analiza cuidadosamente:
1. Nivel de seniority del puesto bas√°ndote en:
   - A√±os de experiencia requeridos
   - Responsabilidades mencionadas
   - Nivel de autonom√≠a esperado
   - Requisitos t√©cnicos espec√≠ficos
   - Rol en el equipo

2. Requisitos de idioma ingl√©s:
   - Busca frases como:
     * "Excelente comunicaci√≥n en ingl√©s"
     * "Fluido en ingl√©s"
     * "Ingl√©s avanzado"
     * "Bilingue" o similar
     * "Comunicaci√≥n escrita y verbal en ingl√©s"
   - Ignora el formato del texto (HTML, espacios, etc.) 
   - Eval√∫a el nivel requerido:
     * B√°sico: Solo lectura de documentaci√≥n
     * Intermedio: Comunicaci√≥n t√©cnica
     * Avanzado: Comunicaci√≥n fluida y presentaciones
     * Experto: Liderazgo y negociaci√≥n


Genera un cuestionario completo siguiendo EXACTAMENTE este formato JSON:
IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.   
{
    "cuestionario": {
        "nombre_puesto": "${jobData.titulo}",
        "preguntas_psicologicas": [
            {
                "numero": 1,
                "pregunta": "texto de la pregunta",
                "opciones": {
                    "A": "texto opci√≥n A",
                    "B": "texto opci√≥n B",
                    "C": "texto opci√≥n C",
                    "D": "texto opci√≥n D"
                },
                "respuesta_correcta": "letra",
                "explicacion": "explicaci√≥n detallada de por qu√© esta es la mejor respuesta"
            }
        ],
        "preguntas_tecnicas": [
            {
                "numero": 1,
                "pregunta": "texto de la pregunta",
                "opciones": {
                    "A": "texto opci√≥n A",
                    "B": "texto opci√≥n B",
                    "C": "texto opci√≥n C",
                    "D": "texto opci√≥n D"
                },
                "respuesta_correcta": "letra",
                "explicacion": "explicaci√≥n detallada de por qu√© esta es la respuesta correcta"
            }
        ]
    }
}

REQUISITOS OBLIGATORIOS:
0. Consideraciones generales para TODAS las preguntas:
   - Idioma de las preguntas:
     * Todas las preguntas DEBEN estar en espa√±ol EXCEPTO:
       - Las preguntas 4 y 5 de psicol√≥gicas si el puesto requiere ingl√©s
       - Las preguntas t√©cnicas que incluyan terminolog√≠a en ingl√©s
     * Las explicaciones DEBEN estar en espa√±ol
     * Las opciones DEBEN estar en el mismo idioma que la pregunta
    - Las opciones de respuesta deben ser:
     * Todas plausibles, profesionales Y tecnicamente defendibles
     * Ninguna debe ser absurda o evidentemente incorrecta
     * Pueden repreesentar incluso diferentes formas de resolver el problema segun experiencia o perspectiva
     * Diferenciadas por matices en el enfoque o la estrategia
     * Basadas en diferentes prioridades o perspectivas v√°lidas
     * Reflejando diferentes niveles de experiencia o enfoques
     * Ejemplo de opciones bien estructuradas:
       "¬øC√≥mo manejar√≠as una falla cr√≠tica en el pipeline de datos?"
       A: "Implementar inmediatamente un hotfix y luego documentar el incidente"
       B: "Analizar primero la causa ra√≠z, luego implementar una soluci√≥n con pruebas adecuadas"
       C: "Volver a la √∫ltima versi√≥n estable y programar un post-mortem"
       D: "Notificar a los stakeholders y crear un plan de recuperaci√≥n detallado antes de actuar"
   - La explicaci√≥n debe detallar:
     * Por qu√© la respuesta es la m√°s adecuada para el contexto
     * Ventajas y desventajas de cada enfoque
     * Consideraciones t√©cnicas y de negocio
     * Mejores pr√°cticas aplicadas


1. Para preguntas_psicologicas:
   Si el puesto requiere ingl√©s:
   - EXACTAMENTE 3 preguntas psicol√≥gicas que eval√∫en:
     * Toma de decisiones acorde al nivel de seniority
     * Resoluci√≥n de conflictos seg√∫n el rol en el equipo
     * √âtica profesional y responsabilidades del nivel
   - EXACTAMENTE 2 preguntas de ingl√©s que eval√∫en:
     * Pregunta 4: Comprensi√≥n de documentaci√≥n t√©cnica y comunicaci√≥n escrita
       - La pregunta DEBE estar en ingl√©s
       - Incluir un email o documentaci√≥n t√©cnica en ingl√©s
       - Evaluar comprensi√≥n y capacidad de respuesta
       - Las opciones DEBEN estar en ingl√©s
     * Pregunta 5: Comunicaci√≥n verbal y presentaci√≥n
       - La pregunta DEBE estar en ingl√©s
       - Incluir un escenario de presentaci√≥n o reuni√≥n en ingl√©s
       - Evaluar capacidad de expresi√≥n y claridad
       - Las opciones DEBEN estar en ingl√©s

   Si el puesto NO requiere ingl√©s:
   - EXACTAMENTE 5 preguntas psicol√≥gicas que eval√∫en:
     * Toma de decisiones acorde al nivel de seniority
     * Resoluci√≥n de conflictos seg√∫n el rol en el equipo
     * √âtica profesional y responsabilidades del nivel
     * Manejo del estr√©s y presi√≥n seg√∫n el cargo
     * Habilidades de liderazgo/colaboraci√≥n seg√∫n el nivel

 
   Formato espec√≠fico para preguntas de ingl√©s (cuando aplique):
   - La pregunta completa DEBE estar en ingl√©s
   - Las opciones DEBEN estar en ingl√©s
   - El contexto DEBE ser en ingl√©s
   - La explicaci√≥n puede estar en espa√±ol
   - Deben incluir:
     * Contexto profesional real (emails, documentaci√≥n, reuniones)
     * Vocabulario t√©cnico espec√≠fico del √°rea
     * Situaciones de comunicaci√≥n real con stakeholders
     
2. Para preguntas_tecnicas:
   DEBEN SER EXACTAMENTE 8 PREGUNTAS DIVIDIDAS EN DOS TIPOS:

   A. PRIMERAS 6 PREGUNTAS (T√âCNICAS TRADICIONALES):
   - Deben evaluar conocimientos t√©cnicos espec√≠ficos del puesto
   - Deben estar alineadas con el nivel de seniority del puesto
   - Deben incluir:
     * Preguntas 1-2: Conceptos fundamentales del √°rea
     * Preguntas 3-4: Herramientas y tecnolog√≠as espec√≠ficas
     * Preguntas 5-6: Mejores pr√°cticas y patrones de dise√±o

   B. √öLTIMAS 2 PREGUNTAS (EJERCICIOS PR√ÅCTICOS):
   - Deben ser escenarios reales y complejos que:
     * Presenten un problema del d√≠a a d√≠a
     * Incluyan contexto detallado
     * Muestren diferentes enfoques de soluci√≥n
     * Eval√∫en capacidad de an√°lisis y resoluci√≥n
     * Sean acordes al nivel de seniority

    Formato espec√≠fico para ejercicios pr√°cticos:
   - Deben incluir:
     * Contexto del problema
     * Informaci√≥n relevante
     * Restricciones o limitaciones
     * Objetivos a alcanzar
   - Las opciones deben ser:
     * Todas soluciones v√°lidas pero con diferentes enfoques
     * Diferenciadas por prioridades t√©cnicas o de negocio
     * Basadas en diferentes consideraciones de arquitectura
     * Ejemplos de enfoques v√°lidos:
       - Opci√≥n A: Enfoque en estabilidad y mantenibilidad
       - Opci√≥n B: Enfoque en rendimiento y escalabilidad
       - Opci√≥n C: Enfoque en flexibilidad y adaptabilidad
       - Opci√≥n D: Enfoque en seguridad y robustez
   - La explicaci√≥n debe detallar:
     * Por qu√© la soluci√≥n es la m√°s adecuada para el contexto
     * Ventajas y desventajas de cada enfoque
     * Consideraciones t√©cnicas y de negocio
     * Mejores pr√°cticas aplicadas

3. Ajustes por nivel de seniority:
   - Junior: 
     * T√©cnicas: Conceptos b√°sicos y herramientas fundamentales
     * Pr√°cticos: Problemas de implementaci√≥n y buenas pr√°cticas
   - Mid-level:
     * T√©cnicas: Arquitectura b√°sica y patrones de dise√±o
     * Pr√°cticos: Problemas de arquitectura simple y escalabilidad
   - Senior:
     * T√©cnicas: Arquitectura avanzada y optimizaci√≥n
     * Pr√°cticos: Problemas de arquitectura compleja y rendimiento
   - Lead:
     * T√©cnicas: Arquitectura empresarial y estrategia t√©cnica
     * Pr√°cticos: Problemas de arquitectura empresarial y gesti√≥n

4. Formato:
   - Respeta EXACTAMENTE la estructura JSON mostrada
   - Numera las preguntas secuencialmente
   - Incluye SIEMPRE 4 opciones (A, B, C, D)

   - Proporciona explicaciones detalladas considerando el nivel
`;

        // Loguear el prompt
        console.log('\nüì§ PROMPT ENVIADO A OPENAI:');
        console.log('----------------------------------------');
        console.log(prompt);
        console.log('----------------------------------------\n');

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ 
                role: "user", 
                content: prompt 
            }],
            temperature: 0.7,
            max_tokens: 4000  // Agregamos el l√≠mite m√°ximo para GPT-4
        });


         // ‚úÖ NUEVO BLOQUE para tokens
         const usage = completion.usage || {};
         const model = completion.model || "desconocido";
 
         // Definir precios por modelo
         // Definir precios por modelo (solo gpt-4o-mini)
         const PRECIOS = {
            "gpt-4o-mini": {
              input:  0.0006,  // USD por 1 000 tokens de entrada
              output: 0.0024   // USD por 1 000 tokens de salida
            }
          };
          
          // C√°lculo "exacto" (no redondeos)
          const precios      = PRECIOS["gpt-4o-mini"];
          const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
          const tokensOutput = usage.completion_tokens;   // p. ej. 1072
          
          const costoInput  = (tokensInput  / 1000) * precios.input;
          const costoOutput = (tokensOutput / 1000) * precios.output;
          const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;
 
         const tokenInfo = {
             modelo: model,
             tokens_prompt: usage.prompt_tokens || 0,
             tokens_respuesta: usage.completion_tokens || 0,
             tokens_total: usage.total_tokens || 0,
             costo_input: costoInput.toFixed(4),
             costo_output: costoOutput.toFixed(4),
             costo_total: costoTotal.toFixed(4),
             fecha: new Date(),
             usuario: "desconocido",
             consulta: "Generar Cuestionario"
         };
         await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);
 
        const response = completion.choices[0].message.content;
        
        // Loguear la respuesta
        console.log('\nüì• RESPUESTA DE OPENAI:');
        console.log('----------------------------------------');
        console.log(response);
        console.log('----------------------------------------\n');

        // Intentar parsear la respuesta
        try {
            const parsedResponse = JSON.parse(response);
            return parsedResponse;
        } catch (error) {
            console.error('Error parseando respuesta de OpenAI:', error);
            return {
                "cuestionario": {
                    "nombre_puesto": jobData.titulo,
                    "preguntas_psicologicas": [{
                        "numero": 1,
                        "pregunta": "Error al generar preguntas",
                        "opciones": {
                            "A": "Error",
                            "B": "Error",
                            "C": "Error",
                            "D": "Error"
                        },
                        "respuesta_correcta": "A",
                        "explicacion": "Error al procesar la respuesta de la IA"
                    }],
                    "preguntas_tecnicas": [{
                        "numero": 1,
                        "pregunta": "Error al generar preguntas",
                        "opciones": {
                            "A": "Error",
                            "B": "Error",
                            "C": "Error",
                            "D": "Error"
                        },
                        "respuesta_correcta": "A",
                        "explicacion": "Error al procesar la respuesta de la IA"
                    }]
                }
            };
        }
    } catch (error) {
        // Loguear errores
        console.error('\n‚ùå ERROR EN GENERATE INTERVIEW:');
        console.error('----------------------------------------');
        console.error('Error completo:', error);
        console.error('----------------------------------------\n');

        // Devolver objeto con error
        return {
            "cuestionario": {
                "nombre_puesto": "Error",
                "preguntas_psicologicas": [],
                "preguntas_tecnicas": [],
                "error": `Error t√©cnico: ${error.message}. Por favor, intente m√°s tarde.`
            }
        };
    }
};

export const detectPostulantesByProactivePerfil = async (jobDescription, candidateInfo, archivos) => {
    try {

        const processedDocs = archivos ? await processCVFiles(archivos) : null;
        let cvText = processedDocs ? processedDocs.map(doc => doc.texto).join('\n\n') : null;

        const prompt = `
        Eres un experto reclutador de IT. Analiza la siguiente descripci√≥n de puesto y el perfil del candidato, junto con el contenido completo de su CV.
        
        OBJETIVO:
        Comparar y evaluar el ajuste del candidato al perfil buscado, utilizando √∫nicamente la informaci√≥n expl√≠cita presente en:
        - La descripci√≥n del puesto (jobDescription)
        - El formulario de postulaci√≥n (candidateInfo)
        - El texto del CV procesado (cvText)
        
        INSTRUCCIONES GENERALES:
        - NO infieras ni inventes informaci√≥n bajo ning√∫n concepto.
        - Solo pod√©s utilizar lo que est√© de forma expl√≠cita en candidateInfo o en el cvText.
        - Si un dato no est√° presente, asum√≠ que no puede evaluarse y trat√° ese campo como vac√≠o o insuficiente.
        - Si un campo del puesto viene vac√≠o, debe ignorar ese criterio (por ejemplo, si no hay ubicaci√≥n, no penalices por eso).
        
        CRITERIOS EXCLUYENTES:
        Un candidato ser√° considerado "NO CUMPLE" si no cumple con al menos uno de los siguientes criterios:
        
        1. Ubicaci√≥n:
           - Si el puesto especifica una o varias ubicaciones, el candidato debe residir en al menos una de ellas.
           - Considerar regiones (LATAM, Patagonia, etc.) como v√°lidas si el pa√≠s/provincia del candidato pertenece a esa regi√≥n.
           - La modalidad (remoto/presencial) NO afecta este criterio.
        
        2. Idioma:
           - Si el puesto exige un idioma a un nivel espec√≠fico, debe cumplirse.
           - Si el idioma est√° mencionado como "preferentemente" o "deseable", NO es excluyente.
        
        3. Otros:
           - Solo deben considerarse excluyentes aquellos criterios marcados como tales en la descripci√≥n.
           - No asumir que algo es excluyente si no est√° expresamente indicado.
        
        Si el candidato no cumple con al menos uno de estos criterios excluyentes, debe devolverse:
        "respuesta": "No" con justificaci√≥n detallada, indicando:
        - Lista de criterios excluyentes requeridos
        - Cu√°les cumple y cu√°les no
        - Por qu√© no cumple
        
        Si cumple todo, entonces:
        "respuesta": "S√≠" con justificaci√≥n detallada de todos los criterios cumplidos.
        
        BLOQUES DE RESPUESTA:
        
        1. "Aptitud general para el puesto":
           - Redactar un an√°lisis t√©cnico y cualitativo del ajuste del candidato al perfil.
           - Explicar por qu√© ser√≠a (o no) una buena opci√≥n.
           - Fundamentar con evidencias del CV y del formulario.
           - Pensar como un reclutador que justifica una recomendaci√≥n ante un cliente.
        
        2. "Fortalezas" y "Debilidades":
           - Solo listar fortalezas o debilidades que est√©n expl√≠citamente mencionadas en el input.
           - Pueden ser t√©cnicas o de soft skills.
           - No inventar.
           - Listar hasta 7 por categor√≠a. Si hay menos, mostrar solo las disponibles.
        
        3. "Calificaci√≥n de adecuaci√≥n" (1 a 10):
           - Pensar como un reclutador experimentado.
           - Evaluar con criterio profesional si el candidato encaja en el puesto.
           - Puntuar de 1 (muy bajo) a 10 (perfecto).
           - Justificar con argumentos s√≥lidos, demostrables con los datos disponibles.
           - Si hay error t√©cnico ‚Üí calificaci√≥n = -2  
             Si hay informaci√≥n insuficiente ‚Üí calificaci√≥n = -1
        
        4. "contactos":
           - Extraer correo, tel√©fono o usuarios sociales desde el cvText.
           - Si ya est√°n en candidateInfo, no repetir.
           - No incluir URLs. Ejemplo: linkedin: juanperez123, github: jperez
           - Solo una ocurrencia por tipo de dato.
        
        C√ÅLCULO DE SCORES INDIVIDUALES (0 a 100):
        
        - Evalu√° cada uno como una "nota escolar". Cuanto mayor el ajuste, mayor el score.
        - Si el perfil no especifica el criterio, asignar 100 por omisi√≥n.
        - Si no hay datos suficientes del candidato, poner -1.
        
        1. technical (40%):
           - Coincidencia entre skills t√©cnicos requeridos y habilidades del candidato.
        
        2. experience (25%):
           - Nivel de experiencia laboral real y demostrada en uso de esas tecnolog√≠as.
        
        3. education (15%):
           - Ajuste entre la formaci√≥n acad√©mica y certificaciones del candidato vs. lo solicitado.
        
        4. years (10%):
           - Comparar a√±os de experiencia requeridos con los a√±os que muestra el candidato.
           - Si cumple o supera ‚Üí 100
           - Si no cumple ‚Üí proporcional. Ej: tiene 2 a√±os y se piden 3 ‚Üí (2/3) * 100 = 66
           - Redondear al entero m√°s cercano.
           - Si no se menciona cantidad de a√±os ‚Üí score = 100
        
        5. location (5%):
           - Si cumple con la ubicaci√≥n solicitada ‚Üí 100
           - Si no cumple ‚Üí 0
           - Si no se especifica ubicaci√≥n ‚Üí 100
        
        6. tags (5%):
           - Por ahora, siempre = 100
        
        totalScore = (technical * 0.4) + (experience * 0.25) + (education * 0.15) + (years * 0.1) + (location * 0.05) + (tags * 0.05)
        
        - Redondear el totalScore a n√∫mero entero.
        - Si no se puede calcular ‚Üí dejar vac√≠o o usar -2 en caso de error t√©cnico.
        
        CONTEXTO DISPONIBLE:
        
        DESCRIPCI√ìN DEL PUESTO:
        T√≠tulo: ${jobDescription.titulo}
        √Årea: ${jobDescription.area || jobDescription.areaTrabajo}
        Descripci√≥n General: ${jobDescription.descripcion}
        Requisitos T√©cnicos: ${jobDescription.requisitos}
        Descripci√≥n del Trabajo: ${jobDescription.descripcionTrabajo}
        Modalidad: ${jobDescription.modalidadTrabajo}
        Tipo de Trabajo: ${jobDescription.tipoTrabajo}
        Ubicaci√≥n: ${JSON.stringify(jobDescription.ubicacion)}
        Nivel Educativo Requerido: ${jobDescription.nivelMinimoEducacion}
        Idiomas Requeridos: ${jobDescription.requisitoIdioma} - ${jobDescription.idioma}
        Disponibilidad: ${jobDescription.requisitoDisponibilidadHoraria}
        Beneficios: ${jobDescription.beneficios}
        Condiciones: ${jobDescription.condiciones}
        
        INFORMACI√ìN DEL CANDIDATO:
        ${JSON.stringify(candidateInfo, null, 2)}
        
        INFORMACI√ìN DEL CV:
        ${cvText}
        
        FORMATO DE RESPUESTA (DEVOLV√â SOLO ESTE OBJETO JSON, SIN TEXTO EXTRA, SIN MARCADORES DE C√ìDIGO):
        

Responde √öNICAMENTE con un objeto JSON con EXACTAMENTE el siguiente formato, sin texto adicional ni explicaciones:
IMPORTANTE: Devuelve √öNICAMENTE el JSON sin ning√∫n formato adicional, sin marcadores de c√≥digo, sin \`\`\`json, sin \`\`\`, sin texto adicional.   
{
    "Cumplimiento de requisitos excluyentes": {
        "respuesta": "Si/No",
        "justificaci√≥n": "explicaci√≥n detallada"
    },
    "Aptitud general para el puesto": "descripci√≥n detallada",
    "Fortalezas identificadas": ["lista", "de", "fortalezas"],
    "Debilidades o √°reas de mejora": ["lista", "de", "debilidades"],
    "Calificaci√≥n de adecuaci√≥n": {
        "calificaci√≥n": n√∫mero del 1 al 10,
        "justificaci√≥n": "explicaci√≥n detallada"
    },
    "scores": {
        "technical": n√∫mero del 0 al 100,
        "experience": n√∫mero del 0 al 100,
        "education": n√∫mero del 0 al 100,
        "years": n√∫mero del 0 al 100,
        "location": n√∫mero del 0 al 100,
        "tags": n√∫mero del 0 al 100
    },
    "totalScore": n√∫mero del 0 al 100,
    "contactos": {
        "datos": "datos de contacto encontrados"
    }
}
`;

        // Loguear el prompt
        console.log('\nüì§ PROMPT ENVIADO A OPENAI:');
        console.log('----------------------------------------');
        console.log(prompt);
        console.log('----------------------------------------\n');

        const completion = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ 
                role: "user", 
                content: prompt 
            }],
            temperature: 0.7,
        });
 // ‚úÖ NUEVO BLOQUE para tokens
 const usage = completion.usage || {};
 const model = completion.model || "desconocido";

 // Definir precios por modelo
 // Definir precios por modelo (solo gpt-4o-mini)
 const PRECIOS = {
    "gpt-4o-mini": {
      input:  0.0006,  // USD por 1 000 tokens de entrada
      output: 0.0024   // USD por 1 000 tokens de salida
    }
  };
  
  // C√°lculo "exacto" (no redondeos)
  const precios      = PRECIOS["gpt-4o-mini"];
  const tokensInput  = usage.prompt_tokens;       // p. ej. 3273
  const tokensOutput = usage.completion_tokens;   // p. ej. 1072
  
  const costoInput  = (tokensInput  / 1000) * precios.input;
  const costoOutput = (tokensOutput / 1000) * precios.output;
  const costoSystem  = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
          const costoTotal   = costoInput + costoOutput + costoSystem;

 const tokenInfo = {
     modelo: model,
     tokens_prompt: usage.prompt_tokens || 0,
     tokens_respuesta: usage.completion_tokens || 0,
     tokens_total: usage.total_tokens || 0,
     costo_input: costoInput.toFixed(4),
     costo_output: costoOutput.toFixed(4),
     costo_total: costoTotal.toFixed(4),
     fecha: new Date(),
     usuario:  "desconocido",
     consulta: "Busqueda Proactiva"
 };
 await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);

        const response = completion.choices[0].message.content;
        
        // Loguear la respuesta
        console.log('\nüì• RESPUESTA DE OPENAI:');
        console.log('----------------------------------------');
        console.log(response);
        console.log('----------------------------------------\n');

        return JSON.parse(response);

    } catch (error) {
        console.error('Error en detectPostulantesByProactivePerfil:', error);
        throw error;
    }
}; 

async function convertDOCXtoPDF(docxBuffer) {
    try {
        console.log('Iniciando conversi√≥n de DOCX a PDF con LibreOffice...');
        
        // Crear una versi√≥n promisificada de la funci√≥n convert
        const convertToPromise = (buffer, outputFormat) => {
            return new Promise((resolve, reject) => {
                libre.convert(buffer, outputFormat, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(result);
                    }
                });
            });
        };

        // Convertir el documento
        const pdfBuffer = await convertToPromise(docxBuffer, '.pdf');
        console.log('‚úÖ Conversi√≥n a PDF completada');
        
        return pdfBuffer;

    } catch (error) {
        console.error('Error en la conversi√≥n con LibreOffice:', error);
        throw error;
    }
}

// Funci√≥n para extraer texto con pdf-parse
async function extractTextWithPdfParse(buffer) {
    try {
        console.log('üîç Intentando extracci√≥n con pdf-parse...');
        const data = await pdfParse(buffer);
        console.log('‚úÖ Extracci√≥n con pdf-parse completada');
        return data.text;
    } catch (error) {
        console.error('‚ùå Error en pdf-parse:', error);
        throw error;
    }
}

// Funci√≥n para extraer texto de PDF como im√°genes
async function extractTextFromPdfAsImages(buffer) {
    let tempDir = null;
    let tempPdfPath = null;
    
    try {
        console.log('üîç Iniciando extracci√≥n de PDF como im√°genes...');
        
        // Crear directorio temporal con nombre √∫nico
        tempDir = path.join(__dirname, '../temp', `pdf_${Date.now()}`);
        fs.mkdirSync(tempDir, { recursive: true });
        
        // Guardar el PDF temporalmente
        tempPdfPath = path.join(tempDir, `temp_${Date.now()}.pdf`);
        await fs.promises.writeFile(tempPdfPath, buffer);
        
        // Configurar opciones de conversi√≥n con pdf-poppler
        const options = {
            format: 'png',
            out_dir: tempDir,
            out_prefix: 'page',
            page: null,
            resolution: 600  // Aumentamos la resoluci√≥n para mejor calidad
        };
        
        console.log('üîÑ Convirtiendo PDF a im√°genes con pdf-poppler...');
        const { convert } = require('pdf-poppler');
        
        try {
            await convert(tempPdfPath, options);
        } catch (convertError) {
            console.error('‚ùå Error en la conversi√≥n del PDF:', convertError);
            throw new Error(`Error al convertir PDF a im√°genes: ${convertError.message}`);
        }
        
        // Leer las im√°genes generadas
        const files = fs.readdirSync(tempDir)
            .filter(file => file.startsWith('page-') && file.endsWith('.png'))
            .sort();
        
        console.log(`‚úÖ PDF convertido a ${files.length} im√°genes`);
        
        if (files.length === 0) {
            throw new Error('No se generaron im√°genes del PDF');
        }
        
        let fullText = '';
        
        // Procesar cada imagen
        for (const file of files) {
            const imagePath = path.join(tempDir, file);
            console.log(`üîÑ Procesando imagen: ${file}`);
            
            try {
                // Leer la imagen
                const imageBuffer = await fs.promises.readFile(imagePath);
                console.log(`üìä Tama√±o de la imagen: ${imageBuffer.length} bytes`);
                
                // Mejorar calidad de imagen con sharp
                const enhancedImage = await sharp(imageBuffer)
                    .resize(2480 * 2, 3508 * 2, {
                        fit: 'inside',
                        withoutEnlargement: true,
                        background: { r: 255, g: 255, b: 255, alpha: 1 }
                    })
                    .grayscale()
                    .normalize()
                    .sharpen() // sin par√°metros: aplica mejora segura
                    .toBuffer();
                                    
                console.log('üîÑ Realizando OCR...');
                
                // Realizar OCR usando Tesseract.recognize directamente
                const result = await Tesseract.recognize(
                    enhancedImage,
                    'spa',
                    {
                        langPath: path.resolve(__dirname, '../tessdata'),
                        tessedit_pageseg_mode: '6',
                        preserve_interword_spaces: '1',
                        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:¬ø?¬°!()[]{}@#$%&*-+=<>/\\|_~√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë√º√ú'
                    }
                ).catch(error => {
                    console.error('Error en OCR:', error);
                    return { data: { text: '' } };
                });
                
                if (result.data.text && result.data.text.trim().length > 0) {
                    fullText += result.data.text + '\n';
                    console.log(`‚úÖ Texto extra√≠do: ${result.data.text.length} caracteres`);
                    console.log('üìù Muestra del texto extra√≠do:', result.data.text.substring(0, 200));
                } else {
                    console.warn(`‚ö†Ô∏è No se extrajo texto de ${file}`);
                }
            
                // üß† NUEVO: guardar imagen si OCR result√≥ muy pobre
                if (!result.data.text || result.data.text.trim().length < 200) {
                    const debugDir = path.join(__dirname, '../debug/ocr');
                    if (!fs.existsSync(debugDir)) {
                        fs.mkdirSync(debugDir, { recursive: true });
                    }
                    const debugImagePath = path.join(debugDir, `${file}`);
                    await fs.promises.copyFile(imagePath, debugImagePath);
                    console.log(`üß† Imagen guardada para revisi√≥n manual: ${debugImagePath}`);
                }
            
                
                // Limpiar archivo temporal
                await fs.promises.unlink(imagePath);
            } catch (error) {
                console.error(`‚ùå Error procesando ${file}:`, error);
                continue;
            }
        }
        
        // Limpiar y formatear el texto
        fullText = fullText
            // Normalizar espacios y saltos de l√≠nea
            .replace(/\s+/g, ' ')
            .replace(/\n+/g, '\n')
            // Corregir caracteres especiales
            .replace(/[|]/g, 'I')  // Reemplazar | por I
            .replace(/[`¬¥]/g, "'") // Normalizar ap√≥strofes
            .replace(/[‚Äì‚Äî]/g, '-') // Normalizar guiones
            // Corregir espacios entre palabras
            .replace(/([a-z])([A-Z])/g, '$1 $2')  // Agregar espacio entre palabras pegadas
            .replace(/([A-Za-z])(\d)/g, '$1 $2')  // Agregar espacio entre letras y n√∫meros
            .replace(/(\d)([A-Za-z])/g, '$1 $2')  // Agregar espacio entre n√∫meros y letras
            // Corregir puntuaci√≥n
            .replace(/\s+([.,;:!?])/g, '$1')  // Eliminar espacios antes de puntuaci√≥n
            .replace(/([.,;:!?])([A-Za-z])/g, '$1 $2')  // Agregar espacio despu√©s de puntuaci√≥n
            // Corregir casos espec√≠ficos comunes en CVs
            .replace(/Product\s*Owner/g, 'Product Owner')
            .replace(/Product\s*Manager/g, 'Product Manager')
            .replace(/Product\s*Analyst/g, 'Product Analyst')
            .replace(/Analista\s*de\s*Procesos/g, 'Analista de Procesos')
            .replace(/Ingeniero\s*Industrial/g, 'Ingeniero Industrial')
            .replace(/Scrum\s*Master/g, 'Scrum Master')
            .replace(/Business\s*Analyst/g, 'Business Analyst')
            .replace(/Senior\s*Developer/g, 'Senior Developer')
            .replace(/Full\s*Stack/g, 'Full Stack')
            .replace(/Back\s*End/g, 'Back End')
            .replace(/Front\s*End/g, 'Front End')
            .replace(/DevOps/g, 'DevOps')
            .replace(/QA/g, 'QA')
            .replace(/UI\/UX/g, 'UI/UX')
            // Eliminar caracteres no deseados
            .replace(/[^\w\s.,;:!?¬ø¬°()\-@#$%&*+=<>/\\|_~√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë√º√ú]/g, '')
            .trim();
        
        console.log('üîÑ Aplicando postprocesamiento inteligente...');
        fullText = await postProcessText(fullText);
        
        console.log('‚úÖ Extracci√≥n como im√°genes completada');
        console.log(`üìä Longitud del texto extra√≠do: ${fullText.length} caracteres`);
        
        if (fullText.length < 100) {
            console.error('‚ùå El texto extra√≠do es demasiado corto');
            console.log('üìù Contenido del texto:', fullText);
            throw new Error('El texto extra√≠do es demasiado corto, posiblemente el OCR fall√≥');
        }
        
        return fullText;
    } catch (error) {
        console.error('‚ùå Error en extracci√≥n como im√°genes:', error);
        throw error;
    } finally {
        // Limpiar recursos
        try {
            if (tempPdfPath && fs.existsSync(tempPdfPath)) {
                await fs.promises.unlink(tempPdfPath);
            }
            if (tempDir && fs.existsSync(tempDir)) {
                await fs.promises.rm(tempDir, { recursive: true, force: true });
            }
        } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Error limpiando recursos temporales:', cleanupError);
        }
    }
}

// üëâ FUNCI√ìN AUXILIAR para extraer una secci√≥n entre dos t√≠tulos
function extractSection(text, start, end) {
    const regex = new RegExp(`${start}([\\s\\S]*?)${end ? end : '$'}`, 'i');
    const match = text.match(regex);
    return match ? match[1].trim() : '';
}
async function postProcessText(text) {
    try {
        console.log('üîÑ Iniciando postprocesamiento inteligente del texto...');
        
        // Limpieza b√°sica inicial m√°s conservadora
        let cleanedText = text
            .replace(/\s+/g, ' ')                    // Eliminar espacios m√∫ltiples
            .replace(/(\w+)-\s*\n\s*(\w+)/g, '$1$2') // Unir palabras con guiones
            .replace(/\n+/g, ' ')                    // Reemplazar m√∫ltiples saltos de l√≠nea
            .replace(/\s+/g, ' ')                    // Limpiar espacios nuevamente
            .trim();

        // Reconstrucci√≥n con IA con prompt m√°s espec√≠fico
        // Separar el texto OCR en secciones por heur√≠stica
const secciones = {
    perfil: extractSection(text, 'Mentalidad estrat√©gica', 'Experiencia'),
    experiencia: extractSection(text, 'Experiencia', 'Educaci√≥n'),
    educacion: extractSection(text, 'Educaci√≥n Principal', 'Educaci√≥n Complementaria'),
    complementaria: extractSection(text, 'Educaci√≥n Complementaria', 'Skills'),
    skills: extractSection(text, 'Skills', 'Certificaciones'),
    certificaciones: extractSection(text, 'Certificaciones', 'Contacto'),
    contacto: extractSection(text, 'Contacto', null)
};

let reconstruido = '';

for (const [nombre, contenido] of Object.entries(secciones)) {
    if (!contenido || contenido.trim().length < 10) continue;

    const promptSeccion = `
Reconstru√≠ con precisi√≥n la secci√≥n "${nombre}" de un CV da√±ado por OCR.
Correg√≠ errores de palabras, puntuaci√≥n y uni√≥n de t√©rminos. 
NO elimines contenido. No inventes. No cambies fechas ni nombres.

Texto original de la secci√≥n "${nombre}":
${contenido}
    `.trim();

    const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: promptSeccion }],
        temperature: 0.1,
        max_tokens: 1500
    });

     // ‚úÖ NUEVO BLOQUE para tokens
     const usage = completion.usage || {};
     const model = completion.model || "desconocido";
     
     // Definir precios por modelo (solo gpt-4o-mini)
     const PRECIOS = {
         "gpt-4o-mini": {
             input:  0.0006,  // USD por 1 000 tokens de entrada
             output: 0.0024   // USD por 1 000 tokens de salida
         }
     };
     
     // C√°lculo "exacto" (no redondeos)
     const precios = PRECIOS["gpt-4o-mini"];
     const tokensInput = usage.prompt_tokens;
     const tokensOutput = usage.completion_tokens;
     
     const costoInput = (tokensInput / 1000) * precios.input;
     const costoOutput = (tokensOutput / 1000) * precios.output;
     const costoSystem = (usage.total_tokens - usage.prompt_tokens - usage.completion_tokens) * precios.input;
     const costoTotal = costoInput + costoOutput + costoSystem;

     const tokenInfo = {
         modelo: model,
         tokens_prompt: usage.prompt_tokens || 0,
         tokens_respuesta: usage.completion_tokens || 0,
         tokens_total: usage.total_tokens || 0,
         costo_input: costoInput.toFixed(4),
         costo_output: costoOutput.toFixed(4),
         costo_total: costoTotal.toFixed(4),
         fecha: new Date(),
         usuario: "desconocido",
         consulta: "Ocr"
     };
     await axios.post(`${API_URL}/api/tokens/guardar`, tokenInfo);
    const seccionReconstruida = completion.choices[0].message.content.trim();
    reconstruido += `\n\n===== ${nombre.toUpperCase()} =====\n${seccionReconstruida}`;
}

       

        let reconstructedText = completion.choices[0].message.content.trim();

        // Limpieza final espec√≠fica para CVs
        reconstructedText = reconstructedText
            // Corregir casos espec√≠ficos comunes en CVs
            .replace(/Product\s*Owner/g, 'Product Owner')
            .replace(/Product\s*Manager/g, 'Product Manager')
            .replace(/Product\s*Analyst/g, 'Product Analyst')
            .replace(/Analista\s*de\s*Procesos/g, 'Analista de Procesos')
            .replace(/Ingeniero\s*Industrial/g, 'Ingeniero Industrial')
            .replace(/Scrum\s*Master/g, 'Scrum Master')
            .replace(/Business\s*Analyst/g, 'Business Analyst')
            .replace(/Senior\s*Developer/g, 'Senior Developer')
            .replace(/Full\s*Stack/g, 'Full Stack')
            .replace(/Back\s*End/g, 'Back End')
            .replace(/Front\s*End/g, 'Front End')
            .replace(/DevOps/g, 'DevOps')
            .replace(/QA/g, 'QA')
            .replace(/UI\/UX/g, 'UI/UX')
            // Corregir emails
            .replace(/([a-zA-Z0-9])\s+(@)/g, '$1$2')
            .replace(/(@)\s+([a-zA-Z0-9])/g, '$1$2')
            .replace(/([a-zA-Z0-9])\s+(\.)\s+([a-zA-Z0-9])/g, '$1$2$3')
            // Corregir n√∫meros de tel√©fono
            .replace(/(\d)\s+(-)\s+(\d)/g, '$1$2$3')
            // Corregir URLs
            .replace(/(https?:\/\/)\s+([^\s]+)/g, '$1$2')
            // Eliminar caracteres no deseados finales
            .replace(/[^\w\s.,;:!?¬ø¬°()\-@#$%&*+=<>/\\|_~√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë√º√ú]/g, '')
            .replace(/\s+/g, ' ')
            .trim();

        console.log('‚úÖ Postprocesamiento completado');
        console.log(`üìä Longitud del texto procesado: ${reconstructedText.length} caracteres`);
        console.log('üìù Muestra del texto procesado:', reconstructedText.substring(0, 500));

        return reconstruido.trim();
    } catch (error) {
        console.error('‚ùå Error en el postprocesamiento:', error);
        return text; // Devolver el texto original en caso de error
    }
}
